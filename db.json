{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/jelly/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/search.png","path":"img/search.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/js/Counter.js","path":"js/Counter.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/js/particles.js","path":"js/particles.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/article.styl","path":"css/article.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/color.styl","path":"css/color.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/kira-image.styl","path":"css/kira-image.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/content.styl","path":"css/content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/post.styl","path":"css/post.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/sidebar.styl","path":"css/sidebar.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/css/right-column.styl","path":"css/right-column.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/js/kira-image.js","path":"js/kira-image.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/demo_index.html","path":"lib/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/demo.css","path":"lib/iconfont/demo.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.css","path":"lib/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.js","path":"lib/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.json","path":"lib/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.ttf","path":"lib/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.woff","path":"lib/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.woff2","path":"lib/iconfont/iconfont.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1689334978505},{"_id":"themes/landscape/.npmignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":499162500000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":499162500000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":499162500000},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":499162500000},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":499162500000},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":499162500000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":499162500000},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":499162500000},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":499162500000},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":499162500000},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":499162500000},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":499162500000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":499162500000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":499162500000},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":499162500000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":499162500000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":499162500000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":499162500000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":499162500000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":499162500000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":499162500000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":499162500000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":499162500000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":499162500000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":499162500000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":499162500000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":499162500000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":499162500000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":499162500000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":499162500000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":499162500000},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":499162500000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":499162500000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":499162500000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":499162500000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":499162500000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":499162500000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":499162500000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":499162500000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":499162500000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":499162500000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":499162500000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":499162500000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":499162500000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":499162500000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":499162500000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":499162500000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":499162500000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":499162500000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":499162500000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":499162500000},{"_id":"source/_posts/Hello-Hexo.md","hash":"c9cb95d177f79082896c1efb539ea52c87302124","modified":1667579907466},{"_id":"themes/jelly/.gitignore","hash":"1e843a7254515d97ddb1d1d32ae83ebfae937f54","modified":1689334978508},{"_id":"themes/jelly/.gitattributes","hash":"78d61b8d5577d8909a33e526f0b968a5a6a81c1c","modified":1689334978507},{"_id":"themes/jelly/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1657568957000},{"_id":"themes/jelly/README.md","hash":"971518f69d9c04bf9e7308673ee0c0bc55fbf7cf","modified":1689334978508},{"_id":"themes/jelly/LICENSE","hash":"e2bd6bdb41b8337bf19f0363674998a1319bed52","modified":1689334978508},{"_id":"themes/jelly/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1657568957000},{"_id":"themes/jelly/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1657568957000},{"_id":"themes/jelly/_config.yml","hash":"9e7ed8f6cc2183ada89ed23171ab3d7ab6643d08","modified":1689334978509},{"_id":"themes/jelly/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1657568957000},{"_id":"themes/jelly/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1689334978521},{"_id":"themes/jelly/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1657568957000},{"_id":"themes/jelly/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1657568957000},{"_id":"themes/jelly/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1657568957000},{"_id":"themes/jelly/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1657568957000},{"_id":"themes/jelly/layout/layout.ejs","hash":"acbcab84260ffe7168b898ccc86dab99da2e44cb","modified":1689334978519},{"_id":"themes/jelly/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1657568957000},{"_id":"themes/jelly/source/css/style.styl","hash":"342846fa8e67ee138fb7a4f14f8375c509b13be9","modified":1689334978532},{"_id":"themes/jelly/source/css/_variables.styl","hash":"266aa4573131b2aeabe7dd11d2c08c80128a27aa","modified":1689334978528},{"_id":"themes/jelly/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1657568957000},{"_id":"themes/jelly/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1657568957000},{"_id":"themes/jelly/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1657568957000},{"_id":"themes/jelly/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1657568957000},{"_id":"themes/jelly/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1657568957000},{"_id":"themes/jelly/source/fancybox/jquery.fancybox.css","hash":"692dc870df0501959ffa7b9920886d5ce948e818","modified":1689334978538},{"_id":"themes/jelly/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1657568957000},{"_id":"themes/jelly/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1657568957000},{"_id":"themes/jelly/source/img/favicon.ico","hash":"9ef5ce3be94987585e4ae0785f6085b8b4f0629d","modified":1657568957000},{"_id":"themes/jelly/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1689334978540},{"_id":"themes/jelly/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1689334978539},{"_id":"themes/jelly/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1657568957000},{"_id":"themes/jelly/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1657568957000},{"_id":"themes/jelly/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1657568957000},{"_id":"themes/jelly/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1657568957000},{"_id":"themes/jelly/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1657568957000},{"_id":"themes/jelly/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1657568957000},{"_id":"themes/jelly/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1657568957000},{"_id":"themes/jelly/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1657568957000},{"_id":"themes/jelly/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1657568957000},{"_id":"themes/jelly/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1657568957000},{"_id":"themes/jelly/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1657568957000},{"_id":"themes/jelly/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1657568957000},{"_id":"themes/jelly/source/img/search.png","hash":"1ab76b03297ae2ce61ec59dd9bf8727f1fbbcedd","modified":1657568957000},{"_id":"themes/jelly/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1657568957000},{"_id":"themes/jelly/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1657568957000},{"_id":"themes/jelly/source/js/Counter.js","hash":"ef766189974c8a6bdd5de586e8bd7daf304f617d","modified":1689334978548},{"_id":"themes/jelly/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1689334978549},{"_id":"themes/jelly/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1689334978548},{"_id":"themes/jelly/source/js/main.js","hash":"928b4881340e10c1255aef8905b1b3e77aea3d97","modified":1689334978549},{"_id":"themes/jelly/source/js/pc.js","hash":"6bc8050e2c2fe9874027f182032e19cc26cfdcfd","modified":1689334978551},{"_id":"themes/jelly/source/js/mobile.js","hash":"387c047e661f04fbb5f5bfc4b2db617023e836ce","modified":1689334978550},{"_id":"themes/jelly/layout/_partial/after-footer.ejs","hash":"15bcb523e600f55e8f6cc288cac1e043c8c2ba02","modified":1689334978510},{"_id":"themes/jelly/source/js/particles.js","hash":"4ea9bd5501eeb6ee79ed57b3608423cfbc399338","modified":1689334978550},{"_id":"themes/jelly/layout/_partial/archive-post.ejs","hash":"5ad682a62264a8b35dc621f00aa123984d6f1cf2","modified":1689334978510},{"_id":"themes/jelly/layout/_partial/baidu_tongji.ejs","hash":"df67dae10b3d5390ca5ff329bf36ff60082bf664","modified":1689334978512},{"_id":"themes/jelly/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1689334978511},{"_id":"themes/jelly/layout/_partial/footer.ejs","hash":"75dab50bd3c136c56e1c5c9b55704c0603662897","modified":1689334978512},{"_id":"themes/jelly/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1689334978513},{"_id":"themes/jelly/layout/_partial/google_analytics.ejs","hash":"0bd77fcbe30c5bc323222c1cfee592300abfd42f","modified":1689334978512},{"_id":"themes/jelly/layout/_partial/left-col.ejs","hash":"d152996ff53fb3ca3bd6c2eee80a3333c27b1475","modified":1689334978513},{"_id":"themes/jelly/layout/_partial/article.ejs","hash":"f46d54023c0fe3222ad64661f224d20c73c0cda1","modified":1689334978511},{"_id":"themes/jelly/layout/_partial/mathjax.ejs","hash":"09f982c283160324de40cc6ae4267b2075edeed1","modified":1689334978514},{"_id":"themes/jelly/layout/_partial/head.ejs","hash":"bcfa5b67ca4f02f40e9ca898a3d2e85f5fa1a523","modified":1689334978512},{"_id":"themes/jelly/layout/_partial/mobile-nav.ejs","hash":"998e065e0ea49852281684fa6e2629780053abec","modified":1689334978514},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1657568957000},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1657568957000},{"_id":"themes/jelly/layout/_partial/search.ejs","hash":"6250423092d8c69d63e14d390fb3df30c6f77f1c","modified":1689334978517},{"_id":"themes/jelly/layout/_widget/Counter.ejs","hash":"472ca8ac00a7143904689b6ce9ea6defd03f0cfc","modified":1689334978518},{"_id":"themes/jelly/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1657568957000},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1689334978536},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1689334978537},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1657568957000},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1689334978538},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1657568957000},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1689334978537},{"_id":"themes/jelly/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1689334978537},{"_id":"themes/jelly/source/css/_partial/archive.styl","hash":"870c22d3aa797f23646d10edb79e95cb52955e9d","modified":1689334978522},{"_id":"themes/jelly/source/css/_partial/header.styl","hash":"5393019d192d31b4f19c991228315944149a87df","modified":1689334978523},{"_id":"themes/jelly/source/css/_partial/article.styl","hash":"f7043f376db70f2239a5574aeaf00f4fa92ead83","modified":1689334978522},{"_id":"themes/jelly/source/css/_partial/highlight.styl","hash":"c55a29a786221f4f4f0d6d7ba2dac1e01f704900","modified":1689334978523},{"_id":"themes/jelly/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1689334978524},{"_id":"themes/jelly/source/css/_partial/footer.styl","hash":"61c1f73d5f80fe73553dfa17c7c9325eedef2271","modified":1689334978522},{"_id":"themes/jelly/source/css/_partial/mobile.styl","hash":"0c918e6ce37eb53ce736808b519132c01777821a","modified":1689334978525},{"_id":"themes/jelly/source/css/_partial/mobile-slider.styl","hash":"9de3211829968df0c9052f54d509353dff4de7c8","modified":1689334978524},{"_id":"themes/jelly/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1689334978525},{"_id":"themes/jelly/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1689334978526},{"_id":"themes/jelly/source/css/_partial/main.styl","hash":"d0e70ec166942c64ce078e42229b770c03e2b4c3","modified":1689334978524},{"_id":"themes/jelly/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1689334978527},{"_id":"themes/jelly/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1689334978527},{"_id":"themes/jelly/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1689334978526},{"_id":"themes/jelly/source/css/_partial/tagcloud.styl","hash":"35b4dd839eaad972a9da7f08015f6ed3d1ffb593","modified":1689334978526},{"_id":"themes/jelly/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1689334978528},{"_id":"themes/jelly/layout/_partial/post/nav.ejs","hash":"e1fd94b1e4655b20018be6c90fa1f9c523274a50","modified":1689334978516},{"_id":"themes/jelly/layout/_partial/post/date.ejs","hash":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1689334978515},{"_id":"themes/jelly/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1689334978514},{"_id":"themes/jelly/layout/_partial/post/title.ejs","hash":"8fc5f697aed67921327caa275e2787122845f2b7","modified":1689334978516},{"_id":"themes/jelly/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1689334978515},{"_id":"themes/jelly/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1689334978530},{"_id":"themes/jelly/layout/_partial/post/tag.ejs","hash":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1689334978516},{"_id":"themes/jelly/layout/_partial/post/viewCounter.ejs","hash":"f23d808e13dfcd1d637c07cc02dc8cf9d371192c","modified":1689334978517},{"_id":"node_modules/hexo-theme-kira/LICENSE","hash":"16401737d2489b2399c6bcb2274e8835bc21c2ec","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/package.json","hash":"05bd19bda039687d56710205f54c5e7eb86ec4e2","modified":1667620933245},{"_id":"node_modules/hexo-theme-kira/readme.md","hash":"072a53271c70269d48e1c0868ce037cc3be4e746","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/languages/default.yml","hash":"6f800ff6fc534f8650bf78a09e424499fd92d6c0","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/languages/en.yml","hash":"be92aee2d6976028f2ea3230a53422a460d18f3b","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/languages/it.yml","hash":"e16512ddbb4c7140d33efd84953685eaa83a9305","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/languages/ja.yml","hash":"1d6a998c9d296fa706f48bfea25a554796a01cda","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/languages/zh-CN.yml","hash":"6f800ff6fc534f8650bf78a09e424499fd92d6c0","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/languages/zh-TW.yml","hash":"02269dc74c26cedb8991be24d5937dd37dc9a366","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/archives.ejs","hash":"472bd605bffae1c9cf0bebb301f3671c8f5dcc48","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/friends.ejs","hash":"cc54fbb8a08f7ebde3e86cb93023e9876192a8b8","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/index.ejs","hash":"9085305dc17e355b74311e6c404acd4a0d02e103","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/languages/zh-HK.yml","hash":"02269dc74c26cedb8991be24d5937dd37dc9a366","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/layout.ejs","hash":"90655e58798ce797a6c4b9cd3734b1e9f189ee5c","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/post.ejs","hash":"a4f3b25383c9f01e4ad86b19d4c70b1c68ffd17c","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/_widget/archive.ejs","hash":"165db463675e3755135a536d60d4c043ee93e1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/_widget/category.ejs","hash":"76ea5df5015a7f36593898a3070404b681500da0","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/_widget/social.ejs","hash":"e79069a61bd22254b95d10d514fb932419d5d98e","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/_widget/tagcloud.ejs","hash":"53feeca5b6dd4f06166f716711497405bf674145","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/components/gitalk.ejs","hash":"5bfda24ae408769d4f103e953957043f0dbbb112","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/components/header.ejs","hash":"6eca691f08fb4dc34f2265aef3643fadc0fa06bb","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/components/copyright.ejs","hash":"7a6bf6be3cd1605c7974a33baf8b54a90a50b141","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/scripts/utils/image_auto_lazyload.js","hash":"fef224ee29365821af9a0d4fe18f99665a65eb80","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/scripts/tag/biliplayer.js","hash":"25a03996512466f235f889a8de0ca8898ea9ff23","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/components/kira-image.ejs","hash":"9f8f55171eabc6c0839708d450e2cae0317243aa","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/scripts/tag/codepen.js","hash":"8b871ebc448984b97559f07313845c384080ed0f","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/scripts/tag/gallery.js","hash":"737f99e3228566fc700d3b6a7f7722946a87e828","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/scripts/tag/myplayer.js","hash":"6c4def874545960c32f9ab0afbbadd239d1b968b","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/archive.styl","hash":"e024cac60a1b0c86ce9815185e8bb867f5d34a04","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/components/right-column.ejs","hash":"6db93a9722a5288f96ab16dd54783e187909657f","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/article.styl","hash":"1fdf4a3331f9557107dcd3fd3f5bf350859a87e2","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/layout/components/sidebar.ejs","hash":"7677ccb3419e3675839c3628f96634f29d993478","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/color.styl","hash":"3934d07c3d78d5eee1ee6cd94bce0967de673aff","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/layout.styl","hash":"f4f4355714cd51a4454d02481d538160784f9a34","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/kira-image.styl","hash":"66c02ba7750c9209975dc6e63ff5afb4fd1bc0af","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/content.styl","hash":"f4f267fd72d4a58dd9fc2ddbabb0e2d37494b438","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/media.styl","hash":"f00608967c7ec7eaa488cc52db3508d24b7f209a","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/post.styl","hash":"ade21ead78690e998f9eac2f1fb890748d5c6c8d","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/sidebar.styl","hash":"9a4a3ee374ac1f989becbf53edb702adc19a6d2a","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/css/right-column.styl","hash":"69d2c762764e661b61c441fa62318a6d9ac746e9","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/js/kira-image.js","hash":"32546ae621ff624c6b752b5425ac0d8701201bba","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/demo_index.html","hash":"15c26f10f991c6d99a7a5d77eb22c2a733d615c1","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.css","hash":"490637bd0daeda076e5494ffec5efec950b5e878","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.js","hash":"ab5909b85a5fc8ad735a1c544453dbc9ffe55807","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.ttf","hash":"f8fe0ed52514a3bd18b35bfa5ad60d8e4aa29144","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.json","hash":"e0f32e9752af6f8103af26e025eb0ce5e6c86c09","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.woff","hash":"476f1a4272bf9785d62f4eb735b98230d2128a56","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/source/lib/iconfont/iconfont.woff2","hash":"c994e72a4b9e3555a3055efddb4c840ce988b4ac","modified":499162500000},{"_id":"node_modules/hexo-theme-kira/preview.png","hash":"4ca5c910079f1360d00083386e30bab63413c66c","modified":499162500000},{"_id":"public/2022/11/05/hello-world/index.html","hash":"1b0d7d9dbf0c5d07567477f8b79fa5e79d9d5eca","modified":1667625501670},{"_id":"public/archives/index.html","hash":"ffc315b72e586ecf177008a44a251a5697967c1a","modified":1667625501670},{"_id":"public/archives/2022/index.html","hash":"11b7025aafa4d0f810d1274e2d9669d3678adaf1","modified":1667625501670},{"_id":"public/archives/2022/11/index.html","hash":"4beb1c1223aab64dc0f094cf0bc2faca6a8d994b","modified":1667625501670},{"_id":"public/index.html","hash":"21a9b0c30634dc31540c3f9b1c55123658681602","modified":1667625501670},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1667625501670},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1667625501670},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1667625501670},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1667625501670},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1667625501670},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1667625501670},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1667625501670},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1667625501670},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1667625501670},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1667625501670},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1667625501670},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1667625501670},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1667625501670},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1667625501670},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1667625501670},{"_id":"public/img/favicon.ico","hash":"9ef5ce3be94987585e4ae0785f6085b8b4f0629d","modified":1667625501670},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1667625501670},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1667625501670},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1667625501670},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1667625501670},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1667625501670},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1667625501670},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1667625501670},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1667625501670},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1667625501670},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1667625501670},{"_id":"public/img/search.png","hash":"1ab76b03297ae2ce61ec59dd9bf8727f1fbbcedd","modified":1667625501670},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1667625501670},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1667625501670},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1667625501670},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1667625501670},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1667625501670},{"_id":"public/lib/iconfont/iconfont.ttf","hash":"f8fe0ed52514a3bd18b35bfa5ad60d8e4aa29144","modified":1667625501670},{"_id":"public/lib/iconfont/iconfont.woff2","hash":"c994e72a4b9e3555a3055efddb4c840ce988b4ac","modified":1667625501670},{"_id":"public/lib/iconfont/iconfont.woff","hash":"476f1a4272bf9785d62f4eb735b98230d2128a56","modified":1667625501670},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"23a6f5b2ff76de9cb3cf1e886194c67647fd868a","modified":1667625501670},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1667625501670},{"_id":"public/fancybox/jquery.fancybox.css","hash":"0fb36984d6889187b1af02bf1968931a1623528a","modified":1667625501670},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1667625501670},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1667625501670},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1667625501670},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1667625501670},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1667625501670},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1667625501670},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1667625501670},{"_id":"public/js/Counter.js","hash":"6697d5dfba2700c059722b62d856d4c86c73031a","modified":1667625501670},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1667625501670},{"_id":"public/js/main.js","hash":"5e92a3694111e5ae5aca37c79157218d35f2e63b","modified":1667625501670},{"_id":"public/js/pc.js","hash":"5520f663c8f2ac94b2ff277f235bb52fc91cc28f","modified":1667625501670},{"_id":"public/css/article.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667625501670},{"_id":"public/css/color.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667625501670},{"_id":"public/css/archive.css","hash":"73be298071178ee3a7c789049345f60bf5285e7d","modified":1667625501670},{"_id":"public/css/kira-image.css","hash":"53e0d291113918807b9572220dd299e92fe58d63","modified":1667625501670},{"_id":"public/css/content.css","hash":"2b9f949c73dcf423afa7a4cf263b7dab13f8db06","modified":1667625501670},{"_id":"public/css/layout.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667625501670},{"_id":"public/css/media.css","hash":"0c8017301458258716bd21d5a200d8f7ba37e49d","modified":1667625501670},{"_id":"public/css/post.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667625501670},{"_id":"public/css/right-column.css","hash":"57166dfb1fdbc29ba7dd1a6243d98042412f2a1b","modified":1667625501670},{"_id":"public/css/sidebar.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667625501670},{"_id":"public/js/kira-image.js","hash":"4d7f760590441ed4bf53d09d9c28f64409cf06a0","modified":1667625501670},{"_id":"public/lib/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1667625501670},{"_id":"public/lib/iconfont/iconfont.css","hash":"490637bd0daeda076e5494ffec5efec950b5e878","modified":1667625501670},{"_id":"public/lib/iconfont/iconfont.js","hash":"ab5909b85a5fc8ad735a1c544453dbc9ffe55807","modified":1667625501670},{"_id":"public/lib/iconfont/iconfont.json","hash":"b311b8ca53246754d348601ad9b8a8ebbff3efe2","modified":1667625501670},{"_id":"public/css/style.css","hash":"b71b5acda8c2cf67bbf41e5ff3fd93c21206fe33","modified":1667625501670},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1667625501670},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1667625501670},{"_id":"public/lib/iconfont/demo_index.html","hash":"15c26f10f991c6d99a7a5d77eb22c2a733d615c1","modified":1667625501670},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1667625501670},{"_id":"public/js/particles.js","hash":"c4286268c2071a624bf3c8565f6328eccecacf30","modified":1667625501670},{"_id":"source/_posts/Leonardo免费使用教程.md","hash":"bc036ae685eb59ef9caba95c6c3d7903b4c9935f","modified":1689334978504},{"_id":"source/_posts/关于Java Map转Bean后所有属性都为null的问题解决方案.md","hash":"e7a5769867bfd30bcaa4769b9cb72430b77329fd","modified":1689334978506},{"_id":"source/_posts/记录一次Unity游戏机翻过程.md","hash":"2c92e282205ec2557ed3928662430c00968e0bfb","modified":1689334978506}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Leonardo免费使用教程","date":"2022-11-05T07:06:25.000Z","_content":"# 前言\nLeonardo是专为windows二和一平板设计的位图绘画软件，它在windows平板以及数位屏上的书写延迟远远低于Clip Studio Paint（优动漫）、Photoshop等传统绘画软件。以下是免费使用流程\n\n# 流程\n\n## 1. 下载安装软件本体\n\n到官网下载。\n我这里下载的是0.17.66版本，不保证更新版本可用。\n安装位置为：C:\\Users\\【你的用户名】\\AppData\\Local\\Leonardo\n**注意：AppData默认为隐藏文件夹**\n\n## 2. 下载注册表并打开\n\n注册表下载地址：**阿里云/s/j4ZG3YE7pVU**\n下载完成后打开。\n点击确定完成注册。\n\n## 3. 阻止联网（重要）\n\n在**打开程序之前**必须阻止软件目录下的xxx.win64.exe联网。\n如果是surface pro x等CPU非Intel或AMD的电脑，也请阻止xxx.win64arm.exe联网。\n方法不唯一，可以使用360，火绒等杀毒软件，也可以尝试glasswire等专门软件。\n但是实测windows防火墙出入站规则无效，原因未知。\n\n## 4. 检查\n\n打开软件，检查是否成功。如果出现**登录弹窗**，则为**失败**。\n失败原因极有可能是阻止联网失败。\n失败以后，请关闭软件，**重新打开第二步中的注册表完成注册**，尝试其他方式阻止软件联网。\n没有弹出登录弹窗就成功了。\n\n### 仅供学习交流，请多多支持正版。","source":"_posts/Leonardo免费使用教程.md","raw":"---\ntitle: Leonardo免费使用教程\ndate: 2022-11-05 15:06:25\ntags: 软件分享\n---\n# 前言\nLeonardo是专为windows二和一平板设计的位图绘画软件，它在windows平板以及数位屏上的书写延迟远远低于Clip Studio Paint（优动漫）、Photoshop等传统绘画软件。以下是免费使用流程\n\n# 流程\n\n## 1. 下载安装软件本体\n\n到官网下载。\n我这里下载的是0.17.66版本，不保证更新版本可用。\n安装位置为：C:\\Users\\【你的用户名】\\AppData\\Local\\Leonardo\n**注意：AppData默认为隐藏文件夹**\n\n## 2. 下载注册表并打开\n\n注册表下载地址：**阿里云/s/j4ZG3YE7pVU**\n下载完成后打开。\n点击确定完成注册。\n\n## 3. 阻止联网（重要）\n\n在**打开程序之前**必须阻止软件目录下的xxx.win64.exe联网。\n如果是surface pro x等CPU非Intel或AMD的电脑，也请阻止xxx.win64arm.exe联网。\n方法不唯一，可以使用360，火绒等杀毒软件，也可以尝试glasswire等专门软件。\n但是实测windows防火墙出入站规则无效，原因未知。\n\n## 4. 检查\n\n打开软件，检查是否成功。如果出现**登录弹窗**，则为**失败**。\n失败原因极有可能是阻止联网失败。\n失败以后，请关闭软件，**重新打开第二步中的注册表完成注册**，尝试其他方式阻止软件联网。\n没有弹出登录弹窗就成功了。\n\n### 仅供学习交流，请多多支持正版。","slug":"Leonardo免费使用教程","published":1,"updated":"2023-07-14T11:42:58.504Z","_id":"cla3lhl2x0000jgu39n3dfsle","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Leonardo是专为windows二和一平板设计的位图绘画软件，它在windows平板以及数位屏上的书写延迟远远低于Clip Studio Paint（优动漫）、Photoshop等传统绘画软件。以下是免费使用流程</p>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><h2 id=\"1-下载安装软件本体\"><a href=\"#1-下载安装软件本体\" class=\"headerlink\" title=\"1. 下载安装软件本体\"></a>1. 下载安装软件本体</h2><p>到官网下载。<br>我这里下载的是0.17.66版本，不保证更新版本可用。<br>安装位置为：C:\\Users\\【你的用户名】\\AppData\\Local\\Leonardo<br><strong>注意：AppData默认为隐藏文件夹</strong></p>\n<h2 id=\"2-下载注册表并打开\"><a href=\"#2-下载注册表并打开\" class=\"headerlink\" title=\"2. 下载注册表并打开\"></a>2. 下载注册表并打开</h2><p>注册表下载地址：<strong>阿里云&#x2F;s&#x2F;j4ZG3YE7pVU</strong><br>下载完成后打开。<br>点击确定完成注册。</p>\n<h2 id=\"3-阻止联网（重要）\"><a href=\"#3-阻止联网（重要）\" class=\"headerlink\" title=\"3. 阻止联网（重要）\"></a>3. 阻止联网（重要）</h2><p>在<strong>打开程序之前</strong>必须阻止软件目录下的xxx.win64.exe联网。<br>如果是surface pro x等CPU非Intel或AMD的电脑，也请阻止xxx.win64arm.exe联网。<br>方法不唯一，可以使用360，火绒等杀毒软件，也可以尝试glasswire等专门软件。<br>但是实测windows防火墙出入站规则无效，原因未知。</p>\n<h2 id=\"4-检查\"><a href=\"#4-检查\" class=\"headerlink\" title=\"4. 检查\"></a>4. 检查</h2><p>打开软件，检查是否成功。如果出现<strong>登录弹窗</strong>，则为<strong>失败</strong>。<br>失败原因极有可能是阻止联网失败。<br>失败以后，请关闭软件，<strong>重新打开第二步中的注册表完成注册</strong>，尝试其他方式阻止软件联网。<br>没有弹出登录弹窗就成功了。</p>\n<h3 id=\"仅供学习交流，请多多支持正版。\"><a href=\"#仅供学习交流，请多多支持正版。\" class=\"headerlink\" title=\"仅供学习交流，请多多支持正版。\"></a>仅供学习交流，请多多支持正版。</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Leonardo是专为windows二和一平板设计的位图绘画软件，它在windows平板以及数位屏上的书写延迟远远低于Clip Studio Paint（优动漫）、Photoshop等传统绘画软件。以下是免费使用流程</p>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><h2 id=\"1-下载安装软件本体\"><a href=\"#1-下载安装软件本体\" class=\"headerlink\" title=\"1. 下载安装软件本体\"></a>1. 下载安装软件本体</h2><p>到官网下载。<br>我这里下载的是0.17.66版本，不保证更新版本可用。<br>安装位置为：C:\\Users\\【你的用户名】\\AppData\\Local\\Leonardo<br><strong>注意：AppData默认为隐藏文件夹</strong></p>\n<h2 id=\"2-下载注册表并打开\"><a href=\"#2-下载注册表并打开\" class=\"headerlink\" title=\"2. 下载注册表并打开\"></a>2. 下载注册表并打开</h2><p>注册表下载地址：<strong>阿里云&#x2F;s&#x2F;j4ZG3YE7pVU</strong><br>下载完成后打开。<br>点击确定完成注册。</p>\n<h2 id=\"3-阻止联网（重要）\"><a href=\"#3-阻止联网（重要）\" class=\"headerlink\" title=\"3. 阻止联网（重要）\"></a>3. 阻止联网（重要）</h2><p>在<strong>打开程序之前</strong>必须阻止软件目录下的xxx.win64.exe联网。<br>如果是surface pro x等CPU非Intel或AMD的电脑，也请阻止xxx.win64arm.exe联网。<br>方法不唯一，可以使用360，火绒等杀毒软件，也可以尝试glasswire等专门软件。<br>但是实测windows防火墙出入站规则无效，原因未知。</p>\n<h2 id=\"4-检查\"><a href=\"#4-检查\" class=\"headerlink\" title=\"4. 检查\"></a>4. 检查</h2><p>打开软件，检查是否成功。如果出现<strong>登录弹窗</strong>，则为<strong>失败</strong>。<br>失败原因极有可能是阻止联网失败。<br>失败以后，请关闭软件，<strong>重新打开第二步中的注册表完成注册</strong>，尝试其他方式阻止软件联网。<br>没有弹出登录弹窗就成功了。</p>\n<h3 id=\"仅供学习交流，请多多支持正版。\"><a href=\"#仅供学习交流，请多多支持正版。\" class=\"headerlink\" title=\"仅供学习交流，请多多支持正版。\"></a>仅供学习交流，请多多支持正版。</h3>"},{"title":"关于Java Map转Bean后所有属性都为null的问题解决方案","date":"2023-06-29T02:00:00.000Z","_content":"# 运行环境\nJava 1.8\n# 问题描述\n在公司的脚手架里有这么一个函数：\n```Java\n/**\n * 将一个 Map 对象转化为一个 JavaBean\n *\n * @param type 要转化的类型\n * @param map 包含属性值的 map\n * @return 转化出来的 JavaBean 对象\n */\n@SuppressWarnings(\"rawtypes\")\npublic static Object convertMap(Class type, Map map)\n```\n而在实际使用的过程中，无论Map是什么，转换得到的Bean所有属性字段都为null。经断点测试发现，问题出在以下代码行\n\n```java\nmethod = descriptor.getWriteMethod();\nmethod.invoke(obj, args);\n```\n即不能调用属性的设置方法。\n# 解决方案\n需要传入的Bean实体类中，修改@Accessors注解。\n\n将\n```Java\n@Accessors(chain = true)\n```\n改为\n```Java\n@Accessors(chain = false)\n```\n","source":"_posts/关于Java Map转Bean后所有属性都为null的问题解决方案.md","raw":"---\ntitle: 关于Java Map转Bean后所有属性都为null的问题解决方案\ndate: 2023-06-29 10:00:00\ntags: Java\n---\n# 运行环境\nJava 1.8\n# 问题描述\n在公司的脚手架里有这么一个函数：\n```Java\n/**\n * 将一个 Map 对象转化为一个 JavaBean\n *\n * @param type 要转化的类型\n * @param map 包含属性值的 map\n * @return 转化出来的 JavaBean 对象\n */\n@SuppressWarnings(\"rawtypes\")\npublic static Object convertMap(Class type, Map map)\n```\n而在实际使用的过程中，无论Map是什么，转换得到的Bean所有属性字段都为null。经断点测试发现，问题出在以下代码行\n\n```java\nmethod = descriptor.getWriteMethod();\nmethod.invoke(obj, args);\n```\n即不能调用属性的设置方法。\n# 解决方案\n需要传入的Bean实体类中，修改@Accessors注解。\n\n将\n```Java\n@Accessors(chain = true)\n```\n改为\n```Java\n@Accessors(chain = false)\n```\n","slug":"关于Java Map转Bean后所有属性都为null的问题解决方案","published":1,"updated":"2023-07-14T11:42:58.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk2inb9o00009wvz3sxo09pk","content":"<h1 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h1><p>Java 1.8</p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>在公司的脚手架里有这么一个函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个 Map 对象转化为一个 JavaBean</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> type 要转化的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> map 包含属性值的 map</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 转化出来的 JavaBean 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">convertMap</span><span class=\"params\">(Class type, Map map)</span></span><br></pre></td></tr></table></figure>\n<p>而在实际使用的过程中，无论Map是什么，转换得到的Bean所有属性字段都为null。经断点测试发现，问题出在以下代码行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">method = descriptor.getWriteMethod();</span><br><span class=\"line\">method.invoke(obj, args);</span><br></pre></td></tr></table></figure>\n<p>即不能调用属性的设置方法。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>需要传入的Bean实体类中，修改@Accessors注解。</p>\n<p>将</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Accessors(chain = true)</span></span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Accessors(chain = false)</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h1><p>Java 1.8</p>\n<h1 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h1><p>在公司的脚手架里有这么一个函数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 将一个 Map 对象转化为一个 JavaBean</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> type 要转化的类型</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> map 包含属性值的 map</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> 转化出来的 JavaBean 对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings(&quot;rawtypes&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">convertMap</span><span class=\"params\">(Class type, Map map)</span></span><br></pre></td></tr></table></figure>\n<p>而在实际使用的过程中，无论Map是什么，转换得到的Bean所有属性字段都为null。经断点测试发现，问题出在以下代码行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">method = descriptor.getWriteMethod();</span><br><span class=\"line\">method.invoke(obj, args);</span><br></pre></td></tr></table></figure>\n<p>即不能调用属性的设置方法。</p>\n<h1 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h1><p>需要传入的Bean实体类中，修改@Accessors注解。</p>\n<p>将</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Accessors(chain = true)</span></span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Accessors(chain = false)</span></span><br></pre></td></tr></table></figure>\n"},{"title":"记录一次Unity游戏机翻过程","date":"2023-07-14T02:06:25.000Z","_content":"\n# 环境工具\n编码环境：Jupyter、python、vscode\n\n游戏样本：Eclipse no majo\n\n游戏解包工具: Assets studio、UnityPy、uabead\n\n\n# 游戏资源分析\n\n## 资源文件目录分析\nAssetBundle目录的结构如下:\n```\n-AssetBundle\n    -- Japanese\n        --- lc_tables\n        --- scenario\n    -- English\n        --- lc_tables\n        --- scenario\n    -- ...\n```\n可见有Japanese和English两个分语言的文件夹，可以推断游戏有采取i18n方案。\n\n在Assets Studio浏览i18n游戏资源发现，English文本不完善，故而选择进一步分析**Japanese文件夹**下的资源文件\n\n## 文件资源分析\n主要分析的是两个文件：**lc_tables**和**scenario**\n### lc_tables\n存放的是主要为游戏的基础信息，如道具名称，结局名称，格式为json。\n### scenario\n存放的是游戏的对话场景台本，需要翻译的内容大致分为以下几类:\n1. 人物台词：以“「”开头以“」”结尾\n2. 旁白：同人物台词，但是没有“「”和“」”作为前导或尾随字符\n3. 功能文本：形如：\\\\[A-Z]{2}[\"*+\"]\n\n## 翻译过程\n1. 使用UnityPy对游戏资源解包\n2. 翻译匹配形式的文本\n3. 重新封包，需要使用到uabead重新压缩\n\n## 完整代码\n### 提取资源\n```python\nimport os\nimport UnityPy\n\ndef extract_TextAsset(game_path: str, output_path: str = \"output\"):\n    \"\"\"提取Texture2D\"\"\"\n    for root, dirs, files in os.walk(game_path):\n        for file_name in files:\n            asset_file_path = os.path.join(root, file_name)\n            env = UnityPy.load(asset_file_path)\n            for obj in env.objects:\n                if(obj.type.name == \"TextAsset\"): \n                    path_id = obj.path_id\n                    data = obj.read()\n                    container_path = str(obj.container)\n                    data_name = container_path[container_path.rindex(\"/\")+1:container_path.rindex(\".\")]\n                    ext = container_path[container_path.rindex(\".\")+1:]\n                    with open(os.path.join(output_path ,f\"{file_name}_{data_name}_{path_id}.{ext}\"), \"wb+\") as f:\n                        f.write(bytes(data.script))\n\nextract_TextAsset(\"game\\AssetBundles\", \"raw\")\n```\n### 翻译\n```python\nimport os\nimport re\nimport json\nfrom hashlib import md5\nimport random\nimport requests\nimport time\n\ndef baidu_translate(content: str) -> str|None:\n    \"\"\"基于requests的百度翻译\"\"\"\n    url = \"https://api.fanyi.baidu.com/api/trans/vip/translate\"\n    q = content\n    from_lang = \"jp\"\n    to_lang = \"zh\"\n    appid = \"******\"\n    secret = \"******\"\n    salt = str(random.randint(100000,999999))\n    sign = md5((appid + q + salt + secret).encode()).hexdigest()\n    data = {\n        \"q\": q,\n        \"from\": from_lang,\n        \"to\": to_lang,\n        \"appid\": appid,\n        \"salt\": salt,\n        \"sign\": sign\n    }\n\n    try:\n        resp = requests.post(url, data, headers={\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        })\n    except Exception as e:\n        print(e)\n        return None\n\n    if resp.status_code != 200:\n        print(\"Http请求错误!\")\n        return None\n    \n    return \"\".join(result['dst'] + '\\n' for result in resp.json()['trans_result'])[0:-1]\n\nclass TextAssetsTranslator:\n    def __init__(self) -> None:\n        self.charaters: dict[str, str] = {\"リズ\":\"丽兹\",\"エリ\":\"艾丽\",\"ロクサーヌ\":\"罗克珊\"}\n\n    # def test(self, content: str, start_and_end: str):\n    #     return start_and_end + content + start_and_end\n    \n    def send_translate_request(self, content: str) -> str:\n        time.sleep(.1)\n        content = content.replace(\"<color=#f59aa0>♥</color>\", \"♥\").replace(\"\\V[EnemyName]\", \"EnemyName\")\n        result = baidu_translate(content)\n        if result == None:\n            time.sleep(.1)\n            result = baidu_translate(content)\n            if result == None:\n                raise Exception(\"百度翻译请求失败！\")\n        result = result.replace(\"♥\",\"<color=#f59aa0>♥</color>\").replace(\"EnemyName\", \"\\V[EnemyName]\")\n        \n        origin_length = len(content.split(\"\\n\"))\n        result_length = len(result.split(\"\\n\"))\n        result = result + \"\\n\" * (origin_length - result_length)\n        return result\n    \n    def translate_scenarios(self, raw_text_folder_path: str = \"raw\", output_path: str = \"translated\", match_pattern: str|None = None):\n        \"\"\"批量翻译场景文件\"\"\"\n        for item in os.scandir(raw_text_folder_path):\n            if item.is_dir():\n                continue\n\n            file_name = item.name\n            # Skip when file name don't match the pattern\n            if match_pattern != None:\n                if re.match(match_pattern, file_name) == None:\n                    continue\n            # Skip when file is already exist\n            if file_name in os.listdir(output_path):\n                continue\n\n            raw_file_path = os.path.join(raw_text_folder_path, file_name)\n            print(f\"loading {raw_file_path}\\n\")\n            # Read data\n            with open(raw_file_path, \"r\", encoding=\"utf-8\") as f:\n                line_list = f.readlines()\n            \n            # Edit data by line\n            read_index = 0\n            while read_index < len(line_list):\n                line = line_list[read_index]\n                # Skip no japanese content line\n                if re.search(r\"([^\\x00-\\xff])+\", line) == None:\n                    read_index = read_index + 1\n                    continue\n                # Skip comment\n                if re.match(r\"^\\s*//\", line):\n                    read_index = read_index + 1\n                    continue\n                # Skip logical syntax\n                if re.match(r\"^\\s*:\", line):\n                    read_index = read_index + 1\n                    continue\n                \n                # Handle charater name\n                if re.match(r\"\\s*\\\\CN\\[.+\\]\",line):\n                    raw_charater_name = line[line.find('\"') + 1:line.rindex('\"')]\n                    if self.charaters.get(raw_charater_name) == None:\n                        charater_name = self.send_translate_request(raw_charater_name)\n                        self.charaters[raw_charater_name] = charater_name\n                        print(f\"[角色名]{raw_charater_name} => {charater_name}\")\n                    else:\n                        charater_name = self.charaters[raw_charater_name]\n                    # Edit\n                    line = line.replace(raw_charater_name, charater_name)\n                    # Save edit\n                    line_list[read_index] = line\n                \n                # Handle choice\n                if re.match(r\"\\s*\\\\CI\\[.+\\]\",line):\n                    raw = line[line.find('\"') + 1:line.rindex('\"')]\n                    result = self.send_translate_request(raw)\n                    print(f\"[选项]{raw} => {result}\")\n                    # Edit\n                    line = line.replace(raw, result)\n                    # Save edit\n                    line_list[read_index] = line\n\n                # Handle dialog\n                elif re.match(r\"^\\s*「([^」]+」\\s*$|[^」]+$)\", line):\n                    start = read_index\n                    raw_contents = [line[line.find(\"「\") + 1:]]\n                    while re.match(r\".+」$\", line) == None:\n                        read_index = read_index + 1\n                        line = line_list[read_index]\n                        raw_contents.append(line)\n                    raw_contents[-1] = raw_contents[-1][:raw_contents[-1].rindex(\"」\")]\n                    \n                    # Handle\n                    wrapped_content = \"\".join(raw_contents)\n                    handled_content = self.send_translate_request(wrapped_content)\n                    \n                    result_contents = [content + \"\\n\" for content in handled_content.split(\"\\n\")]\n                    result_contents[-1] = result_contents[-1][:-1]\n                    # Edit\n                    for i in range(len(raw_contents)):\n                        raw = raw_contents[i].replace(\"\\n\",\"\").replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"　\",\"\")\n                        result = result_contents[i].replace(\"\\n\",\"\").replace(\" \",\"\").replace(\"\\t\", \"\").replace(\"　\",\"\")\n                        line_list[start + i] = line_list[start + i].replace(raw, result)\n                        print(f\"[对话]{raw} => {result}\")\n\n                # Handle voice-over\n                elif re.match(r\"^\\s*(\\\\V\\[EnemyName\\])?[^\\x00-\\xff]+\", line):\n                    start = read_index\n                    raw_contents: list[str] = []\n                    while re.match(r\"^\\s*(\\\\V\\[EnemyName\\])?[^\\x00-\\xff]+\", line) and re.match(r\"^\\s*「([^」]+」\\s*$|[^」]+$)\", line) == None:\n                        raw_contents.append(line)\n                        read_index = read_index + 1\n                        if read_index >= len(line_list): break\n                        line = line_list[read_index]\n\n                    raw_contents[-1] = raw_contents[-1][:-1]\n                    # Handle\n                    wrapped_content = \"\".join(raw_contents)\n                    handled_content = self.send_translate_request(wrapped_content)\n\n                    result_contents = [content + \"\\n\" for content in handled_content.split(\"\\n\")]\n                    # Edit\n                    for i in range(len(raw_contents)):\n                        raw = raw_contents[i].replace(\"\\n\",\"\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"　\",\"\")\n                        result = result_contents[i].replace(\"\\n\",\"\").replace(\" \",\"\").replace(\"\\t\", \"\").replace(\"　\",\"\")\n                        line_list[start + i] = line_list[start + i].replace(raw, result)\n                        print(f\"[旁白]{raw} => {result}\")\n\n                read_index = read_index + 1\n                \n            # Write data\n            output_file_path = os.path.join(output_path, file_name)\n            with open(output_file_path, \"w+\", encoding=\"utf-8\") as f:\n                f.write(\"\".join(line_list))\n\n    def translate_json(self, raw_text_folder_path: str = \"raw\", output_path: str = \"translated\", match_pattern: str|None = None):\n        \"\"\"翻译json\"\"\"\n        for item in os.scandir(raw_text_folder_path):\n            if item.is_dir():\n                continue\n            file_name = item.name\n             # Skip when file name don't match the pattern\n            if match_pattern != None:\n                if re.match(match_pattern, file_name) == None:\n                    continue\n            # Skip when file is already exist\n            if file_name in os.listdir(output_path):\n                continue\n\n            json_file_path = os.path.join(raw_text_folder_path, file_name)\n            print(f\"loading {json_file_path}\")\n            with open(json_file_path, \"r\", encoding=\"utf-8\") as f:\n                str_data = f.read()\n                data = json.loads(str_data)\n\n            stack: list[dict|list|bool|int|float|str] = [data]\n            trans_dict: dict[str,str] = {}\n            while len(stack) > 0:\n                current_node = stack.pop()\n                if type(current_node) is dict:\n                    for key, value in current_node.items():\n                        if type(value) is str:\n                            if re.search(r\"[^\\x00-\\xff◯×]+\", value):\n                                # Translate\n                                if trans_dict.get(value) == None:\n                                    trans_dict[value] = self.send_translate_request(value)\n                                    print(f\"{value} => {trans_dict[value]}\")\n                                # Edit\n                                current_node[key] = trans_dict[value]\n                        else:\n                            stack.append(value)\n                if type(current_node) is list:\n                    for i, item in enumerate(current_node):\n                        if type(item) is str:\n                            if re.search(r\"[^\\x00-\\xff◯×]+\", item):\n                                # Translate\n                                if trans_dict.get(item) == None:\n                                    trans_dict[item] = self.send_translate_request(item)\n                                    print(f\"{item} => {trans_dict[item]}\")\n                                # Edit\n                                current_node[i] = trans_dict[item]\n                        else:\n                            stack.append(item)\n                \n            # Save\n            output_file_path = os.path.join(output_path, file_name)\n            with open(output_file_path, \"w+\", encoding=\"utf-8\") as f:\n                str_data = json.dumps(data)\n                f.write(str_data)\n\ntranslator = TextAssetsTranslator()\ntranslator.translate_scenarios(match_pattern=r\"scenarios_.+\\.txt\")\ntranslator.translate_json(match_pattern=r\"(lc_)?tables_.+\\.json\")\n```\n### 打包\n```python\nimport os\nimport UnityPy\n\ndef inject_TextAsset(game_path: str, source_path: str = \"translated\", output_path: str = \"output\", match_pattern: str|None = None):\n    \"\"\"写入文本\"\"\"\n    source_files = os.listdir(source_path)\n    for root, dirs, files in os.walk(game_path):\n        for file_name in files:\n            asset_file_path = os.path.join(root, file_name)\n            env = UnityPy.load(asset_file_path)\n            change_flag = False\n            for container_path, obj in env.container.items():\n                if obj.type.name == \"TextAsset\":\n                    path_id = obj.path_id\n                    asset_name = container_path[container_path.rindex(\"/\") + 1 : container_path.rindex(\".\")]\n                    ext = container_path[container_path.rindex(\".\") + 1:]\n                    \n                    source_file_name = f\"{file_name}_{asset_name}_{path_id}.{ext}\"\n\n                    if source_file_name not in source_files:\n                        continue\n                    if match_pattern != None:\n                        if re.match(match_pattern, source_file_name) == None:\n                            continue\n\n                    # Edit\n                    change_flag = True\n                    data = obj.read()\n                    with open(os.path.join(source_path, source_file_name), \"rb\") as f:\n                        source_data = f.read()\n                        data.script = source_data\n                    data.save()\n            # Important: Save the file as a new file(decompressed)\n            if change_flag:\n                with open(f\"{output_path}/{file_name}_decompressed\", \"wb+\") as f:\n                    f.write(env.file.save())\n                        \n\ninject_TextAsset(\"game/AssetBundles\", \"translated\")\n```\n","source":"_posts/记录一次Unity游戏机翻过程.md","raw":"---\ntitle: 记录一次Unity游戏机翻过程\ndate: 2023-07-14 10:06:25\ntags: 数据挖掘\n---\n\n# 环境工具\n编码环境：Jupyter、python、vscode\n\n游戏样本：Eclipse no majo\n\n游戏解包工具: Assets studio、UnityPy、uabead\n\n\n# 游戏资源分析\n\n## 资源文件目录分析\nAssetBundle目录的结构如下:\n```\n-AssetBundle\n    -- Japanese\n        --- lc_tables\n        --- scenario\n    -- English\n        --- lc_tables\n        --- scenario\n    -- ...\n```\n可见有Japanese和English两个分语言的文件夹，可以推断游戏有采取i18n方案。\n\n在Assets Studio浏览i18n游戏资源发现，English文本不完善，故而选择进一步分析**Japanese文件夹**下的资源文件\n\n## 文件资源分析\n主要分析的是两个文件：**lc_tables**和**scenario**\n### lc_tables\n存放的是主要为游戏的基础信息，如道具名称，结局名称，格式为json。\n### scenario\n存放的是游戏的对话场景台本，需要翻译的内容大致分为以下几类:\n1. 人物台词：以“「”开头以“」”结尾\n2. 旁白：同人物台词，但是没有“「”和“」”作为前导或尾随字符\n3. 功能文本：形如：\\\\[A-Z]{2}[\"*+\"]\n\n## 翻译过程\n1. 使用UnityPy对游戏资源解包\n2. 翻译匹配形式的文本\n3. 重新封包，需要使用到uabead重新压缩\n\n## 完整代码\n### 提取资源\n```python\nimport os\nimport UnityPy\n\ndef extract_TextAsset(game_path: str, output_path: str = \"output\"):\n    \"\"\"提取Texture2D\"\"\"\n    for root, dirs, files in os.walk(game_path):\n        for file_name in files:\n            asset_file_path = os.path.join(root, file_name)\n            env = UnityPy.load(asset_file_path)\n            for obj in env.objects:\n                if(obj.type.name == \"TextAsset\"): \n                    path_id = obj.path_id\n                    data = obj.read()\n                    container_path = str(obj.container)\n                    data_name = container_path[container_path.rindex(\"/\")+1:container_path.rindex(\".\")]\n                    ext = container_path[container_path.rindex(\".\")+1:]\n                    with open(os.path.join(output_path ,f\"{file_name}_{data_name}_{path_id}.{ext}\"), \"wb+\") as f:\n                        f.write(bytes(data.script))\n\nextract_TextAsset(\"game\\AssetBundles\", \"raw\")\n```\n### 翻译\n```python\nimport os\nimport re\nimport json\nfrom hashlib import md5\nimport random\nimport requests\nimport time\n\ndef baidu_translate(content: str) -> str|None:\n    \"\"\"基于requests的百度翻译\"\"\"\n    url = \"https://api.fanyi.baidu.com/api/trans/vip/translate\"\n    q = content\n    from_lang = \"jp\"\n    to_lang = \"zh\"\n    appid = \"******\"\n    secret = \"******\"\n    salt = str(random.randint(100000,999999))\n    sign = md5((appid + q + salt + secret).encode()).hexdigest()\n    data = {\n        \"q\": q,\n        \"from\": from_lang,\n        \"to\": to_lang,\n        \"appid\": appid,\n        \"salt\": salt,\n        \"sign\": sign\n    }\n\n    try:\n        resp = requests.post(url, data, headers={\n            \"Content-Type\": \"application/x-www-form-urlencoded\"\n        })\n    except Exception as e:\n        print(e)\n        return None\n\n    if resp.status_code != 200:\n        print(\"Http请求错误!\")\n        return None\n    \n    return \"\".join(result['dst'] + '\\n' for result in resp.json()['trans_result'])[0:-1]\n\nclass TextAssetsTranslator:\n    def __init__(self) -> None:\n        self.charaters: dict[str, str] = {\"リズ\":\"丽兹\",\"エリ\":\"艾丽\",\"ロクサーヌ\":\"罗克珊\"}\n\n    # def test(self, content: str, start_and_end: str):\n    #     return start_and_end + content + start_and_end\n    \n    def send_translate_request(self, content: str) -> str:\n        time.sleep(.1)\n        content = content.replace(\"<color=#f59aa0>♥</color>\", \"♥\").replace(\"\\V[EnemyName]\", \"EnemyName\")\n        result = baidu_translate(content)\n        if result == None:\n            time.sleep(.1)\n            result = baidu_translate(content)\n            if result == None:\n                raise Exception(\"百度翻译请求失败！\")\n        result = result.replace(\"♥\",\"<color=#f59aa0>♥</color>\").replace(\"EnemyName\", \"\\V[EnemyName]\")\n        \n        origin_length = len(content.split(\"\\n\"))\n        result_length = len(result.split(\"\\n\"))\n        result = result + \"\\n\" * (origin_length - result_length)\n        return result\n    \n    def translate_scenarios(self, raw_text_folder_path: str = \"raw\", output_path: str = \"translated\", match_pattern: str|None = None):\n        \"\"\"批量翻译场景文件\"\"\"\n        for item in os.scandir(raw_text_folder_path):\n            if item.is_dir():\n                continue\n\n            file_name = item.name\n            # Skip when file name don't match the pattern\n            if match_pattern != None:\n                if re.match(match_pattern, file_name) == None:\n                    continue\n            # Skip when file is already exist\n            if file_name in os.listdir(output_path):\n                continue\n\n            raw_file_path = os.path.join(raw_text_folder_path, file_name)\n            print(f\"loading {raw_file_path}\\n\")\n            # Read data\n            with open(raw_file_path, \"r\", encoding=\"utf-8\") as f:\n                line_list = f.readlines()\n            \n            # Edit data by line\n            read_index = 0\n            while read_index < len(line_list):\n                line = line_list[read_index]\n                # Skip no japanese content line\n                if re.search(r\"([^\\x00-\\xff])+\", line) == None:\n                    read_index = read_index + 1\n                    continue\n                # Skip comment\n                if re.match(r\"^\\s*//\", line):\n                    read_index = read_index + 1\n                    continue\n                # Skip logical syntax\n                if re.match(r\"^\\s*:\", line):\n                    read_index = read_index + 1\n                    continue\n                \n                # Handle charater name\n                if re.match(r\"\\s*\\\\CN\\[.+\\]\",line):\n                    raw_charater_name = line[line.find('\"') + 1:line.rindex('\"')]\n                    if self.charaters.get(raw_charater_name) == None:\n                        charater_name = self.send_translate_request(raw_charater_name)\n                        self.charaters[raw_charater_name] = charater_name\n                        print(f\"[角色名]{raw_charater_name} => {charater_name}\")\n                    else:\n                        charater_name = self.charaters[raw_charater_name]\n                    # Edit\n                    line = line.replace(raw_charater_name, charater_name)\n                    # Save edit\n                    line_list[read_index] = line\n                \n                # Handle choice\n                if re.match(r\"\\s*\\\\CI\\[.+\\]\",line):\n                    raw = line[line.find('\"') + 1:line.rindex('\"')]\n                    result = self.send_translate_request(raw)\n                    print(f\"[选项]{raw} => {result}\")\n                    # Edit\n                    line = line.replace(raw, result)\n                    # Save edit\n                    line_list[read_index] = line\n\n                # Handle dialog\n                elif re.match(r\"^\\s*「([^」]+」\\s*$|[^」]+$)\", line):\n                    start = read_index\n                    raw_contents = [line[line.find(\"「\") + 1:]]\n                    while re.match(r\".+」$\", line) == None:\n                        read_index = read_index + 1\n                        line = line_list[read_index]\n                        raw_contents.append(line)\n                    raw_contents[-1] = raw_contents[-1][:raw_contents[-1].rindex(\"」\")]\n                    \n                    # Handle\n                    wrapped_content = \"\".join(raw_contents)\n                    handled_content = self.send_translate_request(wrapped_content)\n                    \n                    result_contents = [content + \"\\n\" for content in handled_content.split(\"\\n\")]\n                    result_contents[-1] = result_contents[-1][:-1]\n                    # Edit\n                    for i in range(len(raw_contents)):\n                        raw = raw_contents[i].replace(\"\\n\",\"\").replace(\" \", \"\").replace(\"\\t\", \"\").replace(\"　\",\"\")\n                        result = result_contents[i].replace(\"\\n\",\"\").replace(\" \",\"\").replace(\"\\t\", \"\").replace(\"　\",\"\")\n                        line_list[start + i] = line_list[start + i].replace(raw, result)\n                        print(f\"[对话]{raw} => {result}\")\n\n                # Handle voice-over\n                elif re.match(r\"^\\s*(\\\\V\\[EnemyName\\])?[^\\x00-\\xff]+\", line):\n                    start = read_index\n                    raw_contents: list[str] = []\n                    while re.match(r\"^\\s*(\\\\V\\[EnemyName\\])?[^\\x00-\\xff]+\", line) and re.match(r\"^\\s*「([^」]+」\\s*$|[^」]+$)\", line) == None:\n                        raw_contents.append(line)\n                        read_index = read_index + 1\n                        if read_index >= len(line_list): break\n                        line = line_list[read_index]\n\n                    raw_contents[-1] = raw_contents[-1][:-1]\n                    # Handle\n                    wrapped_content = \"\".join(raw_contents)\n                    handled_content = self.send_translate_request(wrapped_content)\n\n                    result_contents = [content + \"\\n\" for content in handled_content.split(\"\\n\")]\n                    # Edit\n                    for i in range(len(raw_contents)):\n                        raw = raw_contents[i].replace(\"\\n\",\"\").replace(\" \",\"\").replace(\"\\t\",\"\").replace(\"　\",\"\")\n                        result = result_contents[i].replace(\"\\n\",\"\").replace(\" \",\"\").replace(\"\\t\", \"\").replace(\"　\",\"\")\n                        line_list[start + i] = line_list[start + i].replace(raw, result)\n                        print(f\"[旁白]{raw} => {result}\")\n\n                read_index = read_index + 1\n                \n            # Write data\n            output_file_path = os.path.join(output_path, file_name)\n            with open(output_file_path, \"w+\", encoding=\"utf-8\") as f:\n                f.write(\"\".join(line_list))\n\n    def translate_json(self, raw_text_folder_path: str = \"raw\", output_path: str = \"translated\", match_pattern: str|None = None):\n        \"\"\"翻译json\"\"\"\n        for item in os.scandir(raw_text_folder_path):\n            if item.is_dir():\n                continue\n            file_name = item.name\n             # Skip when file name don't match the pattern\n            if match_pattern != None:\n                if re.match(match_pattern, file_name) == None:\n                    continue\n            # Skip when file is already exist\n            if file_name in os.listdir(output_path):\n                continue\n\n            json_file_path = os.path.join(raw_text_folder_path, file_name)\n            print(f\"loading {json_file_path}\")\n            with open(json_file_path, \"r\", encoding=\"utf-8\") as f:\n                str_data = f.read()\n                data = json.loads(str_data)\n\n            stack: list[dict|list|bool|int|float|str] = [data]\n            trans_dict: dict[str,str] = {}\n            while len(stack) > 0:\n                current_node = stack.pop()\n                if type(current_node) is dict:\n                    for key, value in current_node.items():\n                        if type(value) is str:\n                            if re.search(r\"[^\\x00-\\xff◯×]+\", value):\n                                # Translate\n                                if trans_dict.get(value) == None:\n                                    trans_dict[value] = self.send_translate_request(value)\n                                    print(f\"{value} => {trans_dict[value]}\")\n                                # Edit\n                                current_node[key] = trans_dict[value]\n                        else:\n                            stack.append(value)\n                if type(current_node) is list:\n                    for i, item in enumerate(current_node):\n                        if type(item) is str:\n                            if re.search(r\"[^\\x00-\\xff◯×]+\", item):\n                                # Translate\n                                if trans_dict.get(item) == None:\n                                    trans_dict[item] = self.send_translate_request(item)\n                                    print(f\"{item} => {trans_dict[item]}\")\n                                # Edit\n                                current_node[i] = trans_dict[item]\n                        else:\n                            stack.append(item)\n                \n            # Save\n            output_file_path = os.path.join(output_path, file_name)\n            with open(output_file_path, \"w+\", encoding=\"utf-8\") as f:\n                str_data = json.dumps(data)\n                f.write(str_data)\n\ntranslator = TextAssetsTranslator()\ntranslator.translate_scenarios(match_pattern=r\"scenarios_.+\\.txt\")\ntranslator.translate_json(match_pattern=r\"(lc_)?tables_.+\\.json\")\n```\n### 打包\n```python\nimport os\nimport UnityPy\n\ndef inject_TextAsset(game_path: str, source_path: str = \"translated\", output_path: str = \"output\", match_pattern: str|None = None):\n    \"\"\"写入文本\"\"\"\n    source_files = os.listdir(source_path)\n    for root, dirs, files in os.walk(game_path):\n        for file_name in files:\n            asset_file_path = os.path.join(root, file_name)\n            env = UnityPy.load(asset_file_path)\n            change_flag = False\n            for container_path, obj in env.container.items():\n                if obj.type.name == \"TextAsset\":\n                    path_id = obj.path_id\n                    asset_name = container_path[container_path.rindex(\"/\") + 1 : container_path.rindex(\".\")]\n                    ext = container_path[container_path.rindex(\".\") + 1:]\n                    \n                    source_file_name = f\"{file_name}_{asset_name}_{path_id}.{ext}\"\n\n                    if source_file_name not in source_files:\n                        continue\n                    if match_pattern != None:\n                        if re.match(match_pattern, source_file_name) == None:\n                            continue\n\n                    # Edit\n                    change_flag = True\n                    data = obj.read()\n                    with open(os.path.join(source_path, source_file_name), \"rb\") as f:\n                        source_data = f.read()\n                        data.script = source_data\n                    data.save()\n            # Important: Save the file as a new file(decompressed)\n            if change_flag:\n                with open(f\"{output_path}/{file_name}_decompressed\", \"wb+\") as f:\n                    f.write(env.file.save())\n                        \n\ninject_TextAsset(\"game/AssetBundles\", \"translated\")\n```\n","slug":"记录一次Unity游戏机翻过程","published":1,"updated":"2023-07-14T11:42:58.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clk2inb9s00019wvz91y46szq","content":"<h1 id=\"环境工具\"><a href=\"#环境工具\" class=\"headerlink\" title=\"环境工具\"></a>环境工具</h1><p>编码环境：Jupyter、python、vscode</p>\n<p>游戏样本：Eclipse no majo</p>\n<p>游戏解包工具: Assets studio、UnityPy、uabead</p>\n<h1 id=\"游戏资源分析\"><a href=\"#游戏资源分析\" class=\"headerlink\" title=\"游戏资源分析\"></a>游戏资源分析</h1><h2 id=\"资源文件目录分析\"><a href=\"#资源文件目录分析\" class=\"headerlink\" title=\"资源文件目录分析\"></a>资源文件目录分析</h2><p>AssetBundle目录的结构如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-AssetBundle</span><br><span class=\"line\">    -- Japanese</span><br><span class=\"line\">        --- lc_tables</span><br><span class=\"line\">        --- scenario</span><br><span class=\"line\">    -- English</span><br><span class=\"line\">        --- lc_tables</span><br><span class=\"line\">        --- scenario</span><br><span class=\"line\">    -- ...</span><br></pre></td></tr></table></figure>\n<p>可见有Japanese和English两个分语言的文件夹，可以推断游戏有采取i18n方案。</p>\n<p>在Assets Studio浏览i18n游戏资源发现，English文本不完善，故而选择进一步分析<strong>Japanese文件夹</strong>下的资源文件</p>\n<h2 id=\"文件资源分析\"><a href=\"#文件资源分析\" class=\"headerlink\" title=\"文件资源分析\"></a>文件资源分析</h2><p>主要分析的是两个文件：<strong>lc_tables</strong>和<strong>scenario</strong></p>\n<h3 id=\"lc-tables\"><a href=\"#lc-tables\" class=\"headerlink\" title=\"lc_tables\"></a>lc_tables</h3><p>存放的是主要为游戏的基础信息，如道具名称，结局名称，格式为json。</p>\n<h3 id=\"scenario\"><a href=\"#scenario\" class=\"headerlink\" title=\"scenario\"></a>scenario</h3><p>存放的是游戏的对话场景台本，需要翻译的内容大致分为以下几类:</p>\n<ol>\n<li>人物台词：以“「”开头以“」”结尾</li>\n<li>旁白：同人物台词，但是没有“「”和“」”作为前导或尾随字符</li>\n<li>功能文本：形如：\\[A-Z]{2}[“*+”]</li>\n</ol>\n<h2 id=\"翻译过程\"><a href=\"#翻译过程\" class=\"headerlink\" title=\"翻译过程\"></a>翻译过程</h2><ol>\n<li>使用UnityPy对游戏资源解包</li>\n<li>翻译匹配形式的文本</li>\n<li>重新封包，需要使用到uabead重新压缩</li>\n</ol>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><h3 id=\"提取资源\"><a href=\"#提取资源\" class=\"headerlink\" title=\"提取资源\"></a>提取资源</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> UnityPy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">extract_TextAsset</span>(<span class=\"params\">game_path: <span class=\"built_in\">str</span>, output_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;output&quot;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;提取Texture2D&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(game_path):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file_name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            asset_file_path = os.path.join(root, file_name)</span><br><span class=\"line\">            env = UnityPy.load(asset_file_path)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> env.objects:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(obj.<span class=\"built_in\">type</span>.name == <span class=\"string\">&quot;TextAsset&quot;</span>): </span><br><span class=\"line\">                    path_id = obj.path_id</span><br><span class=\"line\">                    data = obj.read()</span><br><span class=\"line\">                    container_path = <span class=\"built_in\">str</span>(obj.container)</span><br><span class=\"line\">                    data_name = container_path[container_path.rindex(<span class=\"string\">&quot;/&quot;</span>)+<span class=\"number\">1</span>:container_path.rindex(<span class=\"string\">&quot;.&quot;</span>)]</span><br><span class=\"line\">                    ext = container_path[container_path.rindex(<span class=\"string\">&quot;.&quot;</span>)+<span class=\"number\">1</span>:]</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(output_path ,<span class=\"string\">f&quot;<span class=\"subst\">&#123;file_name&#125;</span>_<span class=\"subst\">&#123;data_name&#125;</span>_<span class=\"subst\">&#123;path_id&#125;</span>.<span class=\"subst\">&#123;ext&#125;</span>&quot;</span>), <span class=\"string\">&quot;wb+&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        f.write(<span class=\"built_in\">bytes</span>(data.script))</span><br><span class=\"line\"></span><br><span class=\"line\">extract_TextAsset(<span class=\"string\">&quot;game\\AssetBundles&quot;</span>, <span class=\"string\">&quot;raw&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">baidu_translate</span>(<span class=\"params\">content: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>|<span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;基于requests的百度翻译&quot;&quot;&quot;</span></span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://api.fanyi.baidu.com/api/trans/vip/translate&quot;</span></span><br><span class=\"line\">    q = content</span><br><span class=\"line\">    from_lang = <span class=\"string\">&quot;jp&quot;</span></span><br><span class=\"line\">    to_lang = <span class=\"string\">&quot;zh&quot;</span></span><br><span class=\"line\">    appid = <span class=\"string\">&quot;******&quot;</span></span><br><span class=\"line\">    secret = <span class=\"string\">&quot;******&quot;</span></span><br><span class=\"line\">    salt = <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>,<span class=\"number\">999999</span>))</span><br><span class=\"line\">    sign = md5((appid + q + salt + secret).encode()).hexdigest()</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;q&quot;</span>: q,</span><br><span class=\"line\">        <span class=\"string\">&quot;from&quot;</span>: from_lang,</span><br><span class=\"line\">        <span class=\"string\">&quot;to&quot;</span>: to_lang,</span><br><span class=\"line\">        <span class=\"string\">&quot;appid&quot;</span>: appid,</span><br><span class=\"line\">        <span class=\"string\">&quot;salt&quot;</span>: salt,</span><br><span class=\"line\">        <span class=\"string\">&quot;sign&quot;</span>: sign</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        resp = requests.post(url, data, headers=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> resp.status_code != <span class=\"number\">200</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Http请求错误!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(result[<span class=\"string\">&#x27;dst&#x27;</span>] + <span class=\"string\">&#x27;\\n&#x27;</span> <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> resp.json()[<span class=\"string\">&#x27;trans_result&#x27;</span>])[<span class=\"number\">0</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TextAssetsTranslator</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.charaters: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"built_in\">str</span>] = &#123;<span class=\"string\">&quot;リズ&quot;</span>:<span class=\"string\">&quot;丽兹&quot;</span>,<span class=\"string\">&quot;エリ&quot;</span>:<span class=\"string\">&quot;艾丽&quot;</span>,<span class=\"string\">&quot;ロクサーヌ&quot;</span>:<span class=\"string\">&quot;罗克珊&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># def test(self, content: str, start_and_end: str):</span></span><br><span class=\"line\">    <span class=\"comment\">#     return start_and_end + content + start_and_end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_translate_request</span>(<span class=\"params\">self, content: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        time.sleep(<span class=\"number\">.1</span>)</span><br><span class=\"line\">        content = content.replace(<span class=\"string\">&quot;&lt;color=#f59aa0&gt;♥&lt;/color&gt;&quot;</span>, <span class=\"string\">&quot;♥&quot;</span>).replace(<span class=\"string\">&quot;\\V[EnemyName]&quot;</span>, <span class=\"string\">&quot;EnemyName&quot;</span>)</span><br><span class=\"line\">        result = baidu_translate(content)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> result == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">.1</span>)</span><br><span class=\"line\">            result = baidu_translate(content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> result == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&quot;百度翻译请求失败！&quot;</span>)</span><br><span class=\"line\">        result = result.replace(<span class=\"string\">&quot;♥&quot;</span>,<span class=\"string\">&quot;&lt;color=#f59aa0&gt;♥&lt;/color&gt;&quot;</span>).replace(<span class=\"string\">&quot;EnemyName&quot;</span>, <span class=\"string\">&quot;\\V[EnemyName]&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        origin_length = <span class=\"built_in\">len</span>(content.split(<span class=\"string\">&quot;\\n&quot;</span>))</span><br><span class=\"line\">        result_length = <span class=\"built_in\">len</span>(result.split(<span class=\"string\">&quot;\\n&quot;</span>))</span><br><span class=\"line\">        result = result + <span class=\"string\">&quot;\\n&quot;</span> * (origin_length - result_length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">translate_scenarios</span>(<span class=\"params\">self, raw_text_folder_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;raw&quot;</span>, output_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;translated&quot;</span>, match_pattern: <span class=\"built_in\">str</span>|<span class=\"literal\">None</span> = <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;批量翻译场景文件&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> os.scandir(raw_text_folder_path):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.is_dir():</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            file_name = item.name</span><br><span class=\"line\">            <span class=\"comment\"># Skip when file name don&#x27;t match the pattern</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> match_pattern != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(match_pattern, file_name) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># Skip when file is already exist</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> file_name <span class=\"keyword\">in</span> os.listdir(output_path):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            raw_file_path = os.path.join(raw_text_folder_path, file_name)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;loading <span class=\"subst\">&#123;raw_file_path&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># Read data</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(raw_file_path, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                line_list = f.readlines()</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># Edit data by line</span></span><br><span class=\"line\">            read_index = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> read_index &lt; <span class=\"built_in\">len</span>(line_list):</span><br><span class=\"line\">                line = line_list[read_index]</span><br><span class=\"line\">                <span class=\"comment\"># Skip no japanese content line</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.search(<span class=\"string\">r&quot;([^\\x00-\\xff])+&quot;</span>, line) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"comment\"># Skip comment</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*//&quot;</span>, line):</span><br><span class=\"line\">                    read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"comment\"># Skip logical syntax</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*:&quot;</span>, line):</span><br><span class=\"line\">                    read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\"># Handle charater name</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\s*\\\\CN\\[.+\\]&quot;</span>,line):</span><br><span class=\"line\">                    raw_charater_name = line[line.find(<span class=\"string\">&#x27;&quot;&#x27;</span>) + <span class=\"number\">1</span>:line.rindex(<span class=\"string\">&#x27;&quot;&#x27;</span>)]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> self.charaters.get(raw_charater_name) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        charater_name = self.send_translate_request(raw_charater_name)</span><br><span class=\"line\">                        self.charaters[raw_charater_name] = charater_name</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[角色名]<span class=\"subst\">&#123;raw_charater_name&#125;</span> =&gt; <span class=\"subst\">&#123;charater_name&#125;</span>&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        charater_name = self.charaters[raw_charater_name]</span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    line = line.replace(raw_charater_name, charater_name)</span><br><span class=\"line\">                    <span class=\"comment\"># Save edit</span></span><br><span class=\"line\">                    line_list[read_index] = line</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\"># Handle choice</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\s*\\\\CI\\[.+\\]&quot;</span>,line):</span><br><span class=\"line\">                    raw = line[line.find(<span class=\"string\">&#x27;&quot;&#x27;</span>) + <span class=\"number\">1</span>:line.rindex(<span class=\"string\">&#x27;&quot;&#x27;</span>)]</span><br><span class=\"line\">                    result = self.send_translate_request(raw)</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[选项]<span class=\"subst\">&#123;raw&#125;</span> =&gt; <span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    line = line.replace(raw, result)</span><br><span class=\"line\">                    <span class=\"comment\"># Save edit</span></span><br><span class=\"line\">                    line_list[read_index] = line</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># Handle dialog</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*「([^」]+」\\s*$|[^」]+$)&quot;</span>, line):</span><br><span class=\"line\">                    start = read_index</span><br><span class=\"line\">                    raw_contents = [line[line.find(<span class=\"string\">&quot;「&quot;</span>) + <span class=\"number\">1</span>:]]</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;.+」$&quot;</span>, line) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                        line = line_list[read_index]</span><br><span class=\"line\">                        raw_contents.append(line)</span><br><span class=\"line\">                    raw_contents[-<span class=\"number\">1</span>] = raw_contents[-<span class=\"number\">1</span>][:raw_contents[-<span class=\"number\">1</span>].rindex(<span class=\"string\">&quot;」&quot;</span>)]</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\"># Handle</span></span><br><span class=\"line\">                    wrapped_content = <span class=\"string\">&quot;&quot;</span>.join(raw_contents)</span><br><span class=\"line\">                    handled_content = self.send_translate_request(wrapped_content)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    result_contents = [content + <span class=\"string\">&quot;\\n&quot;</span> <span class=\"keyword\">for</span> content <span class=\"keyword\">in</span> handled_content.split(<span class=\"string\">&quot;\\n&quot;</span>)]</span><br><span class=\"line\">                    result_contents[-<span class=\"number\">1</span>] = result_contents[-<span class=\"number\">1</span>][:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(raw_contents)):</span><br><span class=\"line\">                        raw = raw_contents[i].replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\t&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;　&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        result = result_contents[i].replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\t&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;　&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        line_list[start + i] = line_list[start + i].replace(raw, result)</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[对话]<span class=\"subst\">&#123;raw&#125;</span> =&gt; <span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># Handle voice-over</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*(\\\\V\\[EnemyName\\])?[^\\x00-\\xff]+&quot;</span>, line):</span><br><span class=\"line\">                    start = read_index</span><br><span class=\"line\">                    raw_contents: <span class=\"built_in\">list</span>[<span class=\"built_in\">str</span>] = []</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*(\\\\V\\[EnemyName\\])?[^\\x00-\\xff]+&quot;</span>, line) <span class=\"keyword\">and</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*「([^」]+」\\s*$|[^」]+$)&quot;</span>, line) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        raw_contents.append(line)</span><br><span class=\"line\">                        read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> read_index &gt;= <span class=\"built_in\">len</span>(line_list): <span class=\"keyword\">break</span></span><br><span class=\"line\">                        line = line_list[read_index]</span><br><span class=\"line\"></span><br><span class=\"line\">                    raw_contents[-<span class=\"number\">1</span>] = raw_contents[-<span class=\"number\">1</span>][:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"comment\"># Handle</span></span><br><span class=\"line\">                    wrapped_content = <span class=\"string\">&quot;&quot;</span>.join(raw_contents)</span><br><span class=\"line\">                    handled_content = self.send_translate_request(wrapped_content)</span><br><span class=\"line\"></span><br><span class=\"line\">                    result_contents = [content + <span class=\"string\">&quot;\\n&quot;</span> <span class=\"keyword\">for</span> content <span class=\"keyword\">in</span> handled_content.split(<span class=\"string\">&quot;\\n&quot;</span>)]</span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(raw_contents)):</span><br><span class=\"line\">                        raw = raw_contents[i].replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\t&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;　&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        result = result_contents[i].replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\t&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;　&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        line_list[start + i] = line_list[start + i].replace(raw, result)</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[旁白]<span class=\"subst\">&#123;raw&#125;</span> =&gt; <span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\"># Write data</span></span><br><span class=\"line\">            output_file_path = os.path.join(output_path, file_name)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(output_file_path, <span class=\"string\">&quot;w+&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(<span class=\"string\">&quot;&quot;</span>.join(line_list))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">translate_json</span>(<span class=\"params\">self, raw_text_folder_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;raw&quot;</span>, output_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;translated&quot;</span>, match_pattern: <span class=\"built_in\">str</span>|<span class=\"literal\">None</span> = <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;翻译json&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> os.scandir(raw_text_folder_path):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.is_dir():</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            file_name = item.name</span><br><span class=\"line\">             <span class=\"comment\"># Skip when file name don&#x27;t match the pattern</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> match_pattern != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(match_pattern, file_name) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># Skip when file is already exist</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> file_name <span class=\"keyword\">in</span> os.listdir(output_path):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            json_file_path = os.path.join(raw_text_folder_path, file_name)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;loading <span class=\"subst\">&#123;json_file_path&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(json_file_path, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                str_data = f.read()</span><br><span class=\"line\">                data = json.loads(str_data)</span><br><span class=\"line\"></span><br><span class=\"line\">            stack: <span class=\"built_in\">list</span>[<span class=\"built_in\">dict</span>|<span class=\"built_in\">list</span>|<span class=\"built_in\">bool</span>|<span class=\"built_in\">int</span>|<span class=\"built_in\">float</span>|<span class=\"built_in\">str</span>] = [data]</span><br><span class=\"line\">            trans_dict: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>,<span class=\"built_in\">str</span>] = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                current_node = stack.pop()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(current_node) <span class=\"keyword\">is</span> <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> current_node.items():</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(value) <span class=\"keyword\">is</span> <span class=\"built_in\">str</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> re.search(<span class=\"string\">r&quot;[^\\x00-\\xff◯×]+&quot;</span>, value):</span><br><span class=\"line\">                                <span class=\"comment\"># Translate</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> trans_dict.get(value) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                                    trans_dict[value] = self.send_translate_request(value)</span><br><span class=\"line\">                                    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;value&#125;</span> =&gt; <span class=\"subst\">&#123;trans_dict[value]&#125;</span>&quot;</span>)</span><br><span class=\"line\">                                <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                                current_node[key] = trans_dict[value]</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                            stack.append(value)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(current_node) <span class=\"keyword\">is</span> <span class=\"built_in\">list</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> i, item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(current_node):</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(item) <span class=\"keyword\">is</span> <span class=\"built_in\">str</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> re.search(<span class=\"string\">r&quot;[^\\x00-\\xff◯×]+&quot;</span>, item):</span><br><span class=\"line\">                                <span class=\"comment\"># Translate</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> trans_dict.get(item) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                                    trans_dict[item] = self.send_translate_request(item)</span><br><span class=\"line\">                                    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;item&#125;</span> =&gt; <span class=\"subst\">&#123;trans_dict[item]&#125;</span>&quot;</span>)</span><br><span class=\"line\">                                <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                                current_node[i] = trans_dict[item]</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                            stack.append(item)</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\"># Save</span></span><br><span class=\"line\">            output_file_path = os.path.join(output_path, file_name)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(output_file_path, <span class=\"string\">&quot;w+&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                str_data = json.dumps(data)</span><br><span class=\"line\">                f.write(str_data)</span><br><span class=\"line\"></span><br><span class=\"line\">translator = TextAssetsTranslator()</span><br><span class=\"line\">translator.translate_scenarios(match_pattern=<span class=\"string\">r&quot;scenarios_.+\\.txt&quot;</span>)</span><br><span class=\"line\">translator.translate_json(match_pattern=<span class=\"string\">r&quot;(lc_)?tables_.+\\.json&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> UnityPy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_TextAsset</span>(<span class=\"params\">game_path: <span class=\"built_in\">str</span>, source_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;translated&quot;</span>, output_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;output&quot;</span>, match_pattern: <span class=\"built_in\">str</span>|<span class=\"literal\">None</span> = <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;写入文本&quot;&quot;&quot;</span></span><br><span class=\"line\">    source_files = os.listdir(source_path)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(game_path):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file_name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            asset_file_path = os.path.join(root, file_name)</span><br><span class=\"line\">            env = UnityPy.load(asset_file_path)</span><br><span class=\"line\">            change_flag = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> container_path, obj <span class=\"keyword\">in</span> env.container.items():</span><br><span class=\"line\">                <span class=\"keyword\">if</span> obj.<span class=\"built_in\">type</span>.name == <span class=\"string\">&quot;TextAsset&quot;</span>:</span><br><span class=\"line\">                    path_id = obj.path_id</span><br><span class=\"line\">                    asset_name = container_path[container_path.rindex(<span class=\"string\">&quot;/&quot;</span>) + <span class=\"number\">1</span> : container_path.rindex(<span class=\"string\">&quot;.&quot;</span>)]</span><br><span class=\"line\">                    ext = container_path[container_path.rindex(<span class=\"string\">&quot;.&quot;</span>) + <span class=\"number\">1</span>:]</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    source_file_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;file_name&#125;</span>_<span class=\"subst\">&#123;asset_name&#125;</span>_<span class=\"subst\">&#123;path_id&#125;</span>.<span class=\"subst\">&#123;ext&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> source_file_name <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> source_files:</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> match_pattern != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(match_pattern, source_file_name) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    change_flag = <span class=\"literal\">True</span></span><br><span class=\"line\">                    data = obj.read()</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(source_path, source_file_name), <span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        source_data = f.read()</span><br><span class=\"line\">                        data.script = source_data</span><br><span class=\"line\">                    data.save()</span><br><span class=\"line\">            <span class=\"comment\"># Important: Save the file as a new file(decompressed)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> change_flag:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;output_path&#125;</span>/<span class=\"subst\">&#123;file_name&#125;</span>_decompressed&quot;</span>, <span class=\"string\">&quot;wb+&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                    f.write(env.file.save())</span><br><span class=\"line\">                        </span><br><span class=\"line\"></span><br><span class=\"line\">inject_TextAsset(<span class=\"string\">&quot;game/AssetBundles&quot;</span>, <span class=\"string\">&quot;translated&quot;</span>)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"环境工具\"><a href=\"#环境工具\" class=\"headerlink\" title=\"环境工具\"></a>环境工具</h1><p>编码环境：Jupyter、python、vscode</p>\n<p>游戏样本：Eclipse no majo</p>\n<p>游戏解包工具: Assets studio、UnityPy、uabead</p>\n<h1 id=\"游戏资源分析\"><a href=\"#游戏资源分析\" class=\"headerlink\" title=\"游戏资源分析\"></a>游戏资源分析</h1><h2 id=\"资源文件目录分析\"><a href=\"#资源文件目录分析\" class=\"headerlink\" title=\"资源文件目录分析\"></a>资源文件目录分析</h2><p>AssetBundle目录的结构如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-AssetBundle</span><br><span class=\"line\">    -- Japanese</span><br><span class=\"line\">        --- lc_tables</span><br><span class=\"line\">        --- scenario</span><br><span class=\"line\">    -- English</span><br><span class=\"line\">        --- lc_tables</span><br><span class=\"line\">        --- scenario</span><br><span class=\"line\">    -- ...</span><br></pre></td></tr></table></figure>\n<p>可见有Japanese和English两个分语言的文件夹，可以推断游戏有采取i18n方案。</p>\n<p>在Assets Studio浏览i18n游戏资源发现，English文本不完善，故而选择进一步分析<strong>Japanese文件夹</strong>下的资源文件</p>\n<h2 id=\"文件资源分析\"><a href=\"#文件资源分析\" class=\"headerlink\" title=\"文件资源分析\"></a>文件资源分析</h2><p>主要分析的是两个文件：<strong>lc_tables</strong>和<strong>scenario</strong></p>\n<h3 id=\"lc-tables\"><a href=\"#lc-tables\" class=\"headerlink\" title=\"lc_tables\"></a>lc_tables</h3><p>存放的是主要为游戏的基础信息，如道具名称，结局名称，格式为json。</p>\n<h3 id=\"scenario\"><a href=\"#scenario\" class=\"headerlink\" title=\"scenario\"></a>scenario</h3><p>存放的是游戏的对话场景台本，需要翻译的内容大致分为以下几类:</p>\n<ol>\n<li>人物台词：以“「”开头以“」”结尾</li>\n<li>旁白：同人物台词，但是没有“「”和“」”作为前导或尾随字符</li>\n<li>功能文本：形如：\\[A-Z]{2}[“*+”]</li>\n</ol>\n<h2 id=\"翻译过程\"><a href=\"#翻译过程\" class=\"headerlink\" title=\"翻译过程\"></a>翻译过程</h2><ol>\n<li>使用UnityPy对游戏资源解包</li>\n<li>翻译匹配形式的文本</li>\n<li>重新封包，需要使用到uabead重新压缩</li>\n</ol>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><h3 id=\"提取资源\"><a href=\"#提取资源\" class=\"headerlink\" title=\"提取资源\"></a>提取资源</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> UnityPy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">extract_TextAsset</span>(<span class=\"params\">game_path: <span class=\"built_in\">str</span>, output_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;output&quot;</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;提取Texture2D&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(game_path):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file_name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            asset_file_path = os.path.join(root, file_name)</span><br><span class=\"line\">            env = UnityPy.load(asset_file_path)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> env.objects:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(obj.<span class=\"built_in\">type</span>.name == <span class=\"string\">&quot;TextAsset&quot;</span>): </span><br><span class=\"line\">                    path_id = obj.path_id</span><br><span class=\"line\">                    data = obj.read()</span><br><span class=\"line\">                    container_path = <span class=\"built_in\">str</span>(obj.container)</span><br><span class=\"line\">                    data_name = container_path[container_path.rindex(<span class=\"string\">&quot;/&quot;</span>)+<span class=\"number\">1</span>:container_path.rindex(<span class=\"string\">&quot;.&quot;</span>)]</span><br><span class=\"line\">                    ext = container_path[container_path.rindex(<span class=\"string\">&quot;.&quot;</span>)+<span class=\"number\">1</span>:]</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(output_path ,<span class=\"string\">f&quot;<span class=\"subst\">&#123;file_name&#125;</span>_<span class=\"subst\">&#123;data_name&#125;</span>_<span class=\"subst\">&#123;path_id&#125;</span>.<span class=\"subst\">&#123;ext&#125;</span>&quot;</span>), <span class=\"string\">&quot;wb+&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        f.write(<span class=\"built_in\">bytes</span>(data.script))</span><br><span class=\"line\"></span><br><span class=\"line\">extract_TextAsset(<span class=\"string\">&quot;game\\AssetBundles&quot;</span>, <span class=\"string\">&quot;raw&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> hashlib <span class=\"keyword\">import</span> md5</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">baidu_translate</span>(<span class=\"params\">content: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>|<span class=\"literal\">None</span>:</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;基于requests的百度翻译&quot;&quot;&quot;</span></span><br><span class=\"line\">    url = <span class=\"string\">&quot;https://api.fanyi.baidu.com/api/trans/vip/translate&quot;</span></span><br><span class=\"line\">    q = content</span><br><span class=\"line\">    from_lang = <span class=\"string\">&quot;jp&quot;</span></span><br><span class=\"line\">    to_lang = <span class=\"string\">&quot;zh&quot;</span></span><br><span class=\"line\">    appid = <span class=\"string\">&quot;******&quot;</span></span><br><span class=\"line\">    secret = <span class=\"string\">&quot;******&quot;</span></span><br><span class=\"line\">    salt = <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>,<span class=\"number\">999999</span>))</span><br><span class=\"line\">    sign = md5((appid + q + salt + secret).encode()).hexdigest()</span><br><span class=\"line\">    data = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;q&quot;</span>: q,</span><br><span class=\"line\">        <span class=\"string\">&quot;from&quot;</span>: from_lang,</span><br><span class=\"line\">        <span class=\"string\">&quot;to&quot;</span>: to_lang,</span><br><span class=\"line\">        <span class=\"string\">&quot;appid&quot;</span>: appid,</span><br><span class=\"line\">        <span class=\"string\">&quot;salt&quot;</span>: salt,</span><br><span class=\"line\">        <span class=\"string\">&quot;sign&quot;</span>: sign</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        resp = requests.post(url, data, headers=&#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(e)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> resp.status_code != <span class=\"number\">200</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Http请求错误!&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>.join(result[<span class=\"string\">&#x27;dst&#x27;</span>] + <span class=\"string\">&#x27;\\n&#x27;</span> <span class=\"keyword\">for</span> result <span class=\"keyword\">in</span> resp.json()[<span class=\"string\">&#x27;trans_result&#x27;</span>])[<span class=\"number\">0</span>:-<span class=\"number\">1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TextAssetsTranslator</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>) -&gt; <span class=\"literal\">None</span>:</span><br><span class=\"line\">        self.charaters: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>, <span class=\"built_in\">str</span>] = &#123;<span class=\"string\">&quot;リズ&quot;</span>:<span class=\"string\">&quot;丽兹&quot;</span>,<span class=\"string\">&quot;エリ&quot;</span>:<span class=\"string\">&quot;艾丽&quot;</span>,<span class=\"string\">&quot;ロクサーヌ&quot;</span>:<span class=\"string\">&quot;罗克珊&quot;</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># def test(self, content: str, start_and_end: str):</span></span><br><span class=\"line\">    <span class=\"comment\">#     return start_and_end + content + start_and_end</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">send_translate_request</span>(<span class=\"params\">self, content: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        time.sleep(<span class=\"number\">.1</span>)</span><br><span class=\"line\">        content = content.replace(<span class=\"string\">&quot;&lt;color=#f59aa0&gt;♥&lt;/color&gt;&quot;</span>, <span class=\"string\">&quot;♥&quot;</span>).replace(<span class=\"string\">&quot;\\V[EnemyName]&quot;</span>, <span class=\"string\">&quot;EnemyName&quot;</span>)</span><br><span class=\"line\">        result = baidu_translate(content)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> result == <span class=\"literal\">None</span>:</span><br><span class=\"line\">            time.sleep(<span class=\"number\">.1</span>)</span><br><span class=\"line\">            result = baidu_translate(content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> result == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> Exception(<span class=\"string\">&quot;百度翻译请求失败！&quot;</span>)</span><br><span class=\"line\">        result = result.replace(<span class=\"string\">&quot;♥&quot;</span>,<span class=\"string\">&quot;&lt;color=#f59aa0&gt;♥&lt;/color&gt;&quot;</span>).replace(<span class=\"string\">&quot;EnemyName&quot;</span>, <span class=\"string\">&quot;\\V[EnemyName]&quot;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        origin_length = <span class=\"built_in\">len</span>(content.split(<span class=\"string\">&quot;\\n&quot;</span>))</span><br><span class=\"line\">        result_length = <span class=\"built_in\">len</span>(result.split(<span class=\"string\">&quot;\\n&quot;</span>))</span><br><span class=\"line\">        result = result + <span class=\"string\">&quot;\\n&quot;</span> * (origin_length - result_length)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">translate_scenarios</span>(<span class=\"params\">self, raw_text_folder_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;raw&quot;</span>, output_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;translated&quot;</span>, match_pattern: <span class=\"built_in\">str</span>|<span class=\"literal\">None</span> = <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;批量翻译场景文件&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> os.scandir(raw_text_folder_path):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.is_dir():</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            file_name = item.name</span><br><span class=\"line\">            <span class=\"comment\"># Skip when file name don&#x27;t match the pattern</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> match_pattern != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(match_pattern, file_name) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># Skip when file is already exist</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> file_name <span class=\"keyword\">in</span> os.listdir(output_path):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            raw_file_path = os.path.join(raw_text_folder_path, file_name)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;loading <span class=\"subst\">&#123;raw_file_path&#125;</span>\\n&quot;</span>)</span><br><span class=\"line\">            <span class=\"comment\"># Read data</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(raw_file_path, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                line_list = f.readlines()</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\"># Edit data by line</span></span><br><span class=\"line\">            read_index = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> read_index &lt; <span class=\"built_in\">len</span>(line_list):</span><br><span class=\"line\">                line = line_list[read_index]</span><br><span class=\"line\">                <span class=\"comment\"># Skip no japanese content line</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.search(<span class=\"string\">r&quot;([^\\x00-\\xff])+&quot;</span>, line) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"comment\"># Skip comment</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*//&quot;</span>, line):</span><br><span class=\"line\">                    read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                <span class=\"comment\"># Skip logical syntax</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*:&quot;</span>, line):</span><br><span class=\"line\">                    read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\"># Handle charater name</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\s*\\\\CN\\[.+\\]&quot;</span>,line):</span><br><span class=\"line\">                    raw_charater_name = line[line.find(<span class=\"string\">&#x27;&quot;&#x27;</span>) + <span class=\"number\">1</span>:line.rindex(<span class=\"string\">&#x27;&quot;&#x27;</span>)]</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> self.charaters.get(raw_charater_name) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        charater_name = self.send_translate_request(raw_charater_name)</span><br><span class=\"line\">                        self.charaters[raw_charater_name] = charater_name</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[角色名]<span class=\"subst\">&#123;raw_charater_name&#125;</span> =&gt; <span class=\"subst\">&#123;charater_name&#125;</span>&quot;</span>)</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                        charater_name = self.charaters[raw_charater_name]</span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    line = line.replace(raw_charater_name, charater_name)</span><br><span class=\"line\">                    <span class=\"comment\"># Save edit</span></span><br><span class=\"line\">                    line_list[read_index] = line</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\"># Handle choice</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;\\s*\\\\CI\\[.+\\]&quot;</span>,line):</span><br><span class=\"line\">                    raw = line[line.find(<span class=\"string\">&#x27;&quot;&#x27;</span>) + <span class=\"number\">1</span>:line.rindex(<span class=\"string\">&#x27;&quot;&#x27;</span>)]</span><br><span class=\"line\">                    result = self.send_translate_request(raw)</span><br><span class=\"line\">                    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[选项]<span class=\"subst\">&#123;raw&#125;</span> =&gt; <span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    line = line.replace(raw, result)</span><br><span class=\"line\">                    <span class=\"comment\"># Save edit</span></span><br><span class=\"line\">                    line_list[read_index] = line</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># Handle dialog</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*「([^」]+」\\s*$|[^」]+$)&quot;</span>, line):</span><br><span class=\"line\">                    start = read_index</span><br><span class=\"line\">                    raw_contents = [line[line.find(<span class=\"string\">&quot;「&quot;</span>) + <span class=\"number\">1</span>:]]</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;.+」$&quot;</span>, line) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                        line = line_list[read_index]</span><br><span class=\"line\">                        raw_contents.append(line)</span><br><span class=\"line\">                    raw_contents[-<span class=\"number\">1</span>] = raw_contents[-<span class=\"number\">1</span>][:raw_contents[-<span class=\"number\">1</span>].rindex(<span class=\"string\">&quot;」&quot;</span>)]</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    <span class=\"comment\"># Handle</span></span><br><span class=\"line\">                    wrapped_content = <span class=\"string\">&quot;&quot;</span>.join(raw_contents)</span><br><span class=\"line\">                    handled_content = self.send_translate_request(wrapped_content)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    result_contents = [content + <span class=\"string\">&quot;\\n&quot;</span> <span class=\"keyword\">for</span> content <span class=\"keyword\">in</span> handled_content.split(<span class=\"string\">&quot;\\n&quot;</span>)]</span><br><span class=\"line\">                    result_contents[-<span class=\"number\">1</span>] = result_contents[-<span class=\"number\">1</span>][:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(raw_contents)):</span><br><span class=\"line\">                        raw = raw_contents[i].replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot; &quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\t&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;　&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        result = result_contents[i].replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\t&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;　&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        line_list[start + i] = line_list[start + i].replace(raw, result)</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[对话]<span class=\"subst\">&#123;raw&#125;</span> =&gt; <span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\"># Handle voice-over</span></span><br><span class=\"line\">                <span class=\"keyword\">elif</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*(\\\\V\\[EnemyName\\])?[^\\x00-\\xff]+&quot;</span>, line):</span><br><span class=\"line\">                    start = read_index</span><br><span class=\"line\">                    raw_contents: <span class=\"built_in\">list</span>[<span class=\"built_in\">str</span>] = []</span><br><span class=\"line\">                    <span class=\"keyword\">while</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*(\\\\V\\[EnemyName\\])?[^\\x00-\\xff]+&quot;</span>, line) <span class=\"keyword\">and</span> re.<span class=\"keyword\">match</span>(<span class=\"string\">r&quot;^\\s*「([^」]+」\\s*$|[^」]+$)&quot;</span>, line) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        raw_contents.append(line)</span><br><span class=\"line\">                        read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> read_index &gt;= <span class=\"built_in\">len</span>(line_list): <span class=\"keyword\">break</span></span><br><span class=\"line\">                        line = line_list[read_index]</span><br><span class=\"line\"></span><br><span class=\"line\">                    raw_contents[-<span class=\"number\">1</span>] = raw_contents[-<span class=\"number\">1</span>][:-<span class=\"number\">1</span>]</span><br><span class=\"line\">                    <span class=\"comment\"># Handle</span></span><br><span class=\"line\">                    wrapped_content = <span class=\"string\">&quot;&quot;</span>.join(raw_contents)</span><br><span class=\"line\">                    handled_content = self.send_translate_request(wrapped_content)</span><br><span class=\"line\"></span><br><span class=\"line\">                    result_contents = [content + <span class=\"string\">&quot;\\n&quot;</span> <span class=\"keyword\">for</span> content <span class=\"keyword\">in</span> handled_content.split(<span class=\"string\">&quot;\\n&quot;</span>)]</span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(raw_contents)):</span><br><span class=\"line\">                        raw = raw_contents[i].replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\t&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;　&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        result = result_contents[i].replace(<span class=\"string\">&quot;\\n&quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot; &quot;</span>,<span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;\\t&quot;</span>, <span class=\"string\">&quot;&quot;</span>).replace(<span class=\"string\">&quot;　&quot;</span>,<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">                        line_list[start + i] = line_list[start + i].replace(raw, result)</span><br><span class=\"line\">                        <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;[旁白]<span class=\"subst\">&#123;raw&#125;</span> =&gt; <span class=\"subst\">&#123;result&#125;</span>&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                read_index = read_index + <span class=\"number\">1</span></span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\"># Write data</span></span><br><span class=\"line\">            output_file_path = os.path.join(output_path, file_name)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(output_file_path, <span class=\"string\">&quot;w+&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                f.write(<span class=\"string\">&quot;&quot;</span>.join(line_list))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">translate_json</span>(<span class=\"params\">self, raw_text_folder_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;raw&quot;</span>, output_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;translated&quot;</span>, match_pattern: <span class=\"built_in\">str</span>|<span class=\"literal\">None</span> = <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;翻译json&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> os.scandir(raw_text_folder_path):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> item.is_dir():</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\">            file_name = item.name</span><br><span class=\"line\">             <span class=\"comment\"># Skip when file name don&#x27;t match the pattern</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> match_pattern != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(match_pattern, file_name) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">            <span class=\"comment\"># Skip when file is already exist</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> file_name <span class=\"keyword\">in</span> os.listdir(output_path):</span><br><span class=\"line\">                <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">            json_file_path = os.path.join(raw_text_folder_path, file_name)</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;loading <span class=\"subst\">&#123;json_file_path&#125;</span>&quot;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(json_file_path, <span class=\"string\">&quot;r&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                str_data = f.read()</span><br><span class=\"line\">                data = json.loads(str_data)</span><br><span class=\"line\"></span><br><span class=\"line\">            stack: <span class=\"built_in\">list</span>[<span class=\"built_in\">dict</span>|<span class=\"built_in\">list</span>|<span class=\"built_in\">bool</span>|<span class=\"built_in\">int</span>|<span class=\"built_in\">float</span>|<span class=\"built_in\">str</span>] = [data]</span><br><span class=\"line\">            trans_dict: <span class=\"built_in\">dict</span>[<span class=\"built_in\">str</span>,<span class=\"built_in\">str</span>] = &#123;&#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(stack) &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                current_node = stack.pop()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(current_node) <span class=\"keyword\">is</span> <span class=\"built_in\">dict</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> key, value <span class=\"keyword\">in</span> current_node.items():</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(value) <span class=\"keyword\">is</span> <span class=\"built_in\">str</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> re.search(<span class=\"string\">r&quot;[^\\x00-\\xff◯×]+&quot;</span>, value):</span><br><span class=\"line\">                                <span class=\"comment\"># Translate</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> trans_dict.get(value) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                                    trans_dict[value] = self.send_translate_request(value)</span><br><span class=\"line\">                                    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;value&#125;</span> =&gt; <span class=\"subst\">&#123;trans_dict[value]&#125;</span>&quot;</span>)</span><br><span class=\"line\">                                <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                                current_node[key] = trans_dict[value]</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                            stack.append(value)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(current_node) <span class=\"keyword\">is</span> <span class=\"built_in\">list</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> i, item <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(current_node):</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span>(item) <span class=\"keyword\">is</span> <span class=\"built_in\">str</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">if</span> re.search(<span class=\"string\">r&quot;[^\\x00-\\xff◯×]+&quot;</span>, item):</span><br><span class=\"line\">                                <span class=\"comment\"># Translate</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> trans_dict.get(item) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                                    trans_dict[item] = self.send_translate_request(item)</span><br><span class=\"line\">                                    <span class=\"built_in\">print</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;item&#125;</span> =&gt; <span class=\"subst\">&#123;trans_dict[item]&#125;</span>&quot;</span>)</span><br><span class=\"line\">                                <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                                current_node[i] = trans_dict[item]</span><br><span class=\"line\">                        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                            stack.append(item)</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\"># Save</span></span><br><span class=\"line\">            output_file_path = os.path.join(output_path, file_name)</span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(output_file_path, <span class=\"string\">&quot;w+&quot;</span>, encoding=<span class=\"string\">&quot;utf-8&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                str_data = json.dumps(data)</span><br><span class=\"line\">                f.write(str_data)</span><br><span class=\"line\"></span><br><span class=\"line\">translator = TextAssetsTranslator()</span><br><span class=\"line\">translator.translate_scenarios(match_pattern=<span class=\"string\">r&quot;scenarios_.+\\.txt&quot;</span>)</span><br><span class=\"line\">translator.translate_json(match_pattern=<span class=\"string\">r&quot;(lc_)?tables_.+\\.json&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> UnityPy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">inject_TextAsset</span>(<span class=\"params\">game_path: <span class=\"built_in\">str</span>, source_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;translated&quot;</span>, output_path: <span class=\"built_in\">str</span> = <span class=\"string\">&quot;output&quot;</span>, match_pattern: <span class=\"built_in\">str</span>|<span class=\"literal\">None</span> = <span class=\"literal\">None</span></span>):</span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;写入文本&quot;&quot;&quot;</span></span><br><span class=\"line\">    source_files = os.listdir(source_path)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> root, dirs, files <span class=\"keyword\">in</span> os.walk(game_path):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> file_name <span class=\"keyword\">in</span> files:</span><br><span class=\"line\">            asset_file_path = os.path.join(root, file_name)</span><br><span class=\"line\">            env = UnityPy.load(asset_file_path)</span><br><span class=\"line\">            change_flag = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> container_path, obj <span class=\"keyword\">in</span> env.container.items():</span><br><span class=\"line\">                <span class=\"keyword\">if</span> obj.<span class=\"built_in\">type</span>.name == <span class=\"string\">&quot;TextAsset&quot;</span>:</span><br><span class=\"line\">                    path_id = obj.path_id</span><br><span class=\"line\">                    asset_name = container_path[container_path.rindex(<span class=\"string\">&quot;/&quot;</span>) + <span class=\"number\">1</span> : container_path.rindex(<span class=\"string\">&quot;.&quot;</span>)]</span><br><span class=\"line\">                    ext = container_path[container_path.rindex(<span class=\"string\">&quot;.&quot;</span>) + <span class=\"number\">1</span>:]</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    source_file_name = <span class=\"string\">f&quot;<span class=\"subst\">&#123;file_name&#125;</span>_<span class=\"subst\">&#123;asset_name&#125;</span>_<span class=\"subst\">&#123;path_id&#125;</span>.<span class=\"subst\">&#123;ext&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> source_file_name <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> source_files:</span><br><span class=\"line\">                        <span class=\"keyword\">continue</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> match_pattern != <span class=\"literal\">None</span>:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> re.<span class=\"keyword\">match</span>(match_pattern, source_file_name) == <span class=\"literal\">None</span>:</span><br><span class=\"line\">                            <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\"># Edit</span></span><br><span class=\"line\">                    change_flag = <span class=\"literal\">True</span></span><br><span class=\"line\">                    data = obj.read()</span><br><span class=\"line\">                    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(os.path.join(source_path, source_file_name), <span class=\"string\">&quot;rb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                        source_data = f.read()</span><br><span class=\"line\">                        data.script = source_data</span><br><span class=\"line\">                    data.save()</span><br><span class=\"line\">            <span class=\"comment\"># Important: Save the file as a new file(decompressed)</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> change_flag:</span><br><span class=\"line\">                <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">f&quot;<span class=\"subst\">&#123;output_path&#125;</span>/<span class=\"subst\">&#123;file_name&#125;</span>_decompressed&quot;</span>, <span class=\"string\">&quot;wb+&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">                    f.write(env.file.save())</span><br><span class=\"line\">                        </span><br><span class=\"line\"></span><br><span class=\"line\">inject_TextAsset(<span class=\"string\">&quot;game/AssetBundles&quot;</span>, <span class=\"string\">&quot;translated&quot;</span>)</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cla3lhl2x0000jgu39n3dfsle","tag_id":"cla3lhl370001jgu3dhp69o28","_id":"cla3lhl3b0002jgu36xeb5phu"},{"post_id":"clk2inb9o00009wvz3sxo09pk","tag_id":"clk2inb9u00029wvzch2afxkl","_id":"clk2inb9y00049wvzf47i2xyp"},{"post_id":"clk2inb9s00019wvz91y46szq","tag_id":"clk2inb9x00039wvz3ed99h3j","_id":"clk2inb9y00059wvz5l0sbq2e"}],"Tag":[{"name":"软件分享","_id":"cla3lhl370001jgu3dhp69o28"},{"name":"Java","_id":"clk2inb9u00029wvzch2afxkl"},{"name":"数据挖掘","_id":"clk2inb9x00039wvz3ed99h3j"}]}}